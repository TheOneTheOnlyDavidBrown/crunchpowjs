"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function load_component(e,t){new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this.existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'" because it doesnt exist in the schema');var a=this.checkType(this.data,e,t);return a?void this.setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'" because it it isnt the right type')}},{key:"get",value:function(e){return e?this.getValue(this.data,e):this.getData(this.data)}},{key:"existsInSchema",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.existsInSchema(e[t.shift()].value,t,n):e[t[0]]?!0:!1}},{key:"checkType",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.checkType(e[t.shift()].value,t,n):e[t[0]].type===typeof n}},{key:"getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this.getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"setValue",value:function(e,t,n){t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]].value?this.setValue(e[t.shift()].value,t,n):e[t[0]].value&&(e[t[0]].value=n)}},{key:"getValue",value:function(e,t){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.getValue(e[t.shift()].value,t):e[t[0]].value||""}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n)}},{key:"fetch",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;console.log("make get xhr call to "+t)}},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;console.log("make delete xhr call to "+t)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this.findBindable();var a=a||{};setInterval(function(){JSON.stringify(a)!==JSON.stringify(n.data)&&(a=JSON.parse(JSON.stringify(n.data)),n.populateBindings())},10)}return _createClass(e,[{key:"populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var a,r=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(a=r.next()).done);e=!0){var i=a.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this.setElementContent(i,this.getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&r["return"]&&r["return"]()}finally{if(t)throw n}}}},{key:"findBindable",value:function(){var e=this,t=!0,n=!1,a=void 0;try{for(var r,i=function(){var t=r.value;t.addEventListener("keyup",function(n){e.setValue(e.data,t.getAttribute("liaison-bind"),n.target.value)})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(r=o.next()).done);t=!0)i()}catch(s){n=!0,a=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw a}}}},{key:"setElementContent",value:function(e,t){t&&(e.innerHTML=t,e.value=t)}},{key:"setValue",value:function(e,t,n){"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this.setValue(e[t.shift()],t,n):e[t[0]]&&(e[t[0]]=n)}},{key:"getValue",value:function(e,t){return"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this.getValue(e[t.shift()],t):e[t[0]]||""}},{key:"refresh",value:function(e){this.data=e,this.populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);var n=void 0;for(n in t)this[n]=t[n]},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.view=document.querySelector("[liaison-view]"),this.paths=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){this.paths.push(e)}},{key:"go",value:function(e){var t=this,n=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];console.log("going to state "+e,this.view);var a=this.findRouteInPaths(e);a&&fetch(a.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}),n&&(this.url=a)}},{key:"findRouteInPaths",value:function(e){var t=!0,n=!1,a=void 0;try{for(var r,i=this.paths[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var o=r.value;if(o.name===e)return o}}catch(s){n=!0,a=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw a}}return null}},{key:"url",set:function(e){e?window.history.pushState(e.name,e.name,"#"+e.name):window.history.pushState("fallback","fallback","#/")}},{key:"currentState",get:function(){return window.history.state}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){console.log(this.bind.user),console.log(this.bind.programming_languages);var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save(),e.update(),e.fetch(),e.destroy();var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,router.state({name:"hodor/joke",templateUrl:"templates/hodor.html"}),router.state({name:"hodor/joke/:id",templateUrl:"templates/hodorid.html"}),router.state({name:"list",templateUrl:"templates/list.html"}),router.state({name:"/",templateUrl:"templates/list.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,o=n;s=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=o,a=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,o=n;s=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=o,a=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programming_languages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel);
//# sourceMappingURL=data:application/json;base64,