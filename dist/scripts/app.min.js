"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function loadComponent(e,t){return new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this._existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". Doesnt exist in the schema');var r=this._checkType(this.data,e,t);return r?void this._setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". It isnt the right type')}},{key:"get",value:function(e){var t=void 0;return t=e?this._getValue(this.data,e):this._getData(this.data)}},{key:"_existsInSchema",value:function(e,t,n){var r=void 0,a="string"==typeof t?t.split("."):t;return r=a.length>1&&e[a[0]]?this._existsInSchema(e[a.shift()].value,a,n):e[a[0]]?!0:!1}},{key:"_checkType",value:function(e,t,n){var r=void 0,a="string"==typeof t?t.split("."):t;return r=a.length>1&&e[a[0]]?this._checkType(e[a.shift()].value,a,n):e[a[0]].type===typeof n}},{key:"_getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this._getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"_setValue",value:function(e,t,n){var r="string"==typeof t?t.split("."):t;r.length>1&&e[r[0]].value?this._setValue(e[r.shift()].value,r,n):e[r[0]].value&&(e[r[0]].value=n)}},{key:"_getValue",value:function(e,t){var n=void 0,r=t;return r="string"==typeof t?r.split("."):r,n=r.length>1&&e[r[0]]?this._getValue(e[r.shift()].value,r):e[r[0]].value||""}},{key:"_checkStatus",value:function(e){var t=void 0;if(!(e.status>=200&&e.status<300)){var n=new Error(e.statusText);throw n.response=e,n}return t=e}},{key:"_parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={},r={method:"post",body:JSON.stringify(n)};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,r).then(this._checkStatus).then(this._parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"get"};return console.log("make get xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"delete"};return console.log("make delete xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this._findBindable(),this.utils=new Utils;var r=r||{};setInterval(function(){n.utils.compare(r,n.data)===!1&&(r=JSON.parse(JSON.stringify(n.data)),n._populateBindings())},10)}return _createClass(e,[{key:"_populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,a=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(r=a.next()).done);e=!0){var i=r.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this._setElementContent(i,this._getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&a["return"]&&a["return"]()}finally{if(t)throw n}}}},{key:"_findBindable",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var a,i=function(){var t=a.value;t.addEventListener("keydown",function(n){setTimeout(function(){return e._setValue(e.data,t.getAttribute("liaison-bind"),n.srcElement.value)})})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(a=o.next()).done);t=!0)i()}catch(s){n=!0,r=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}}},{key:"_setElementContent",value:function(e,t){void 0!==t&&(e.innerHTML=t,e.value=t)}},{key:"_setValue",value:function(e,t,n){var r=t;"string"==typeof r&&(r=r.split(".")),r.length>1&&e[r[0]]?this._setValue(e[r.shift()],r,n):"string"==typeof e[r[0]]&&(e[r[0]]=n)}},{key:"_getValue",value:function(e,t){var n=t,r=void 0;return"string"==typeof n&&(n=n.split(".")),r=n.length>1&&e[n[0]]?this._getValue(e[n.shift()],n):e[n[0]]}},{key:"refresh",value:function(e){this.data=e,this._populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);for(var n in t)n&&(this[n]=t[n])},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.utils=new Utils,this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this._findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"_findRouteInPaths",value:function(e){var t=!0,n=!1,r=void 0;try{for(var a,i=this.paths[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var o=a.value;if(o.name===e)return o}}catch(s){n=!0,r=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}var l=e.substring(1).split("/"),u=!0,c=!1,h=void 0;try{for(var f,d=this.wildcards[Symbol.iterator]();!(u=(f=d.next()).done);u=!0){var v=f.value,p=v.name.substring(1).split("/");if(p.length===l.length)for(var g=0,y=p.length;y>g;g++)if(0===p[g].indexOf(":")){var m=p;if(m[g]=l[g],this.utils.compare(m,l))return v}}}catch(s){c=!0,h=s}finally{try{!u&&d["return"]&&d["return"]()}finally{if(c)throw h}}return!1}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Utils=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_hasher",value:function(e){var t=0,n=void 0,r=void 0,a=e.toString();for(n=0,r=a.length;r>n;n++)t=(t<<5)-t+a.charCodeAt(n)&4294967295;return t}},{key:"_object",value:function(e,t){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=n;for(var a in t){if("object"==typeof t[a])return this._object(e,t[a],r);hasOwnProperty.call(t,a)&&(r+=e._hasher(a+e._hasher(t[a])))}return r}},{key:"hash",value:function(e){var t={string:this._hasher,number:this._hasher,"boolean":this._hasher,object:this.object},n=typeof e;return null!==e&&t[n]?t[n](this,e)+this._hasher(n):0}},{key:"compareHashes",value:function(e,t){return this.hash(e)===this.hash(t)}},{key:"compare",value:function(e,t){return JSON.stringify(e)===JSON.stringify(t)}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),this.binding=new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,window.router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programmingLanguages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJMaWFpc29uLmpzIiwiQmFzZU1vZGVsLmpzIiwiQmluZGluZy5qcyIsIlJvdXRlci5qcyIsIlV0aWxzLmpzIiwic2NyaXB0cy9FeGFtcGxlLmpzIiwic2NyaXB0cy9FeGFtcGxlMi5qcyIsInNjcmlwdHMvUm91dGVzLmpzIiwic2NyaXB0cy9Vc2VyTW9kZWwuanMiLCJzY3JpcHRzL1ZpZXdNb2RlbC5qcyJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwibG9hZENvbXBvbmVudCIsIm1vZHVsZSIsImRhdGEiLCJ3aW5kb3ciLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiQmFzZU1vZGVsIiwibW9kZWxOYW1lIiwic2NoZW1hIiwidGhpcyIsImV4aXN0c0luU2NoZW1hIiwiX2V4aXN0c0luU2NoZW1hIiwiY29uc29sZSIsIndhcm4iLCJ0eXBlTWF0Y2hlcyIsIl9jaGVja1R5cGUiLCJfc2V0VmFsdWUiLCJhY2Nlc3MiLCJyZXR1cm5WYWx1ZSIsInVuZGVmaW5lZCIsIl9nZXRWYWx1ZSIsIl9nZXREYXRhIiwib2JqIiwiX2FjY2VzcyIsInNwbGl0Iiwic2hpZnQiLCJ0eXBlIiwibmV3T2JqIiwiYXJndW1lbnRzIiwiZWxlbWVudCIsInJlc3BvbnNlIiwic3RhdHVzIiwiZXJyb3IiLCJFcnJvciIsInN0YXR1c1RleHQiLCJqc29uIiwiaWQiLCJnZXQiLCJ1cmwiLCJlbmRwb2ludFByZWZpeCIsInNlbmRPYmoiLCJ4aHJQcm9wZXJ0aWVzIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2ciLCJmZXRjaCIsInRoZW4iLCJfY2hlY2tTdGF0dXMiLCJfcGFyc2VKU09OIiwiX2ZldGNoIiwiYXBwbHkiLCJ0b1N0cmluZyIsInNldCIsInByZWZpeCIsIl9lbmRwb2ludFByZWZpeCIsIk5vZGVMaXN0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJBcnJheSIsIkJpbmRpbmciLCJfdGhpcyIsIl9maW5kQmluZGFibGUiLCJ1dGlscyIsIlV0aWxzIiwiY3VycmVudERhdGEiLCJzZXRJbnRlcnZhbCIsImNvbXBhcmUiLCJwYXJzZSIsIl9wb3B1bGF0ZUJpbmRpbmdzIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm5leHQiLCJkb25lIiwiZWxtIiwiYmluZE5hbWUiLCJhY3RpdmVFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiX3NldEVsZW1lbnRDb250ZW50IiwiZXJyIiwiX3RoaXMyIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfbG9vcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInNldFRpbWVvdXQiLCJzcmNFbGVtZW50IiwiX2l0ZXJhdG9yMiIsImlubmVySFRNTCIsIkxpYWlzb24iLCJkYXR1bSIsIlJvdXRlciIsInZpZXciLCJxdWVyeVNlbGVjdG9yIiwicGF0aHMiLCJ3aWxkY2FyZHMiLCJnbyIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsInN0YXRlIiwibmFtZSIsImluZGV4T2YiLCJwdXNoIiwiX2ZhbGxiYWNrIiwicm91dGUiLCJfZmluZFJvdXRlSW5QYXRocyIsInRlbXBsYXRlVXJsIiwidGV4dCIsInRlbXBsYXRlIiwicGF0aCIsIl9yb3V0ZSIsIndpbGRjYXJkIiwiX3dpbGRjYXJkIiwiaW5kZXgiLCJsZW4iLCJ0ZW1wIiwidmFsIiwic3RyaW5nIiwiY2hhckNvZGVBdCIsInNlbGYiLCJyZXN1bHQiLCJfcmVzdWx0IiwicHJvcGVydHkiLCJfb2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX2hhc2hlciIsImlucHV0IiwidHlwZXMiLCJudW1iZXIiLCJib29sZWFuIiwib2JqZWN0IiwiaXRlbUEiLCJpdGVtQiIsIkV4YW1wbGUiLCJiaW5kIiwiYmluZGluZyIsImV4YW1wbGVCaW5kaW5nIiwiZXhhbXBsZVJvdXRlciIsInVzZXIiLCJVc2VyTW9kZWwiLCJhZ2UiLCJ1cENhc2UiLCJzYXZlIiwidXBkYXRlIiwiZGVzdHJveSIsInZpZXdtb2RlbCIsIlZpZXdNb2RlbCIsInJlZnJlc2giLCJFeGFtcGxlMiIsInJvdXRlciIsImZhbGxiYWNrIiwiX2dldCIsIl94IiwiX3gyIiwiX3gzIiwiX2FnYWluIiwicmVjZWl2ZXIiLCJkZXNjIiwicGFyZW50IiwiZ2V0dGVyIiwiRnVuY3Rpb24iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIl9CYXNlTW9kZWwiLCJhZGRyZXNzIiwic3RyIiwidG9VcHBlckNhc2UiLCJzaW5nbGUiLCJwcm9ncmFtbWluZ0xhbmd1YWdlcyJdLCJtYXBwaW5ncyI6IkFBQ0EsWUFJQSxTQUFTQSxpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0ErTWhILFFBQVNILGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQWtKaEgsUUFBU0gsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNDN1ZqRyxR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LE9BRVR5SCxNQUNFcEYsS0FBTSxTQUNOckMsTUFBTyxtQkFFVDBMLFNBQ0VySixLQUFNLFNBQ05yQyxNQUFPLHVCQUliOEwsc0JBQ0V6SixLQUFNLFFBQ05yQyxPQUFRLGFBQWMsV1ZteEI1QixNQWxDQVAsV1Uzd0JXK0ssRUFBU2lCLEdBQVRqQixHQUFrQnZKIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExpYWlzb24ge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgZm9yIChjb25zdCBkYXR1bSBpbiBkYXRhKSB7XG4gICAgICBpZiAoZGF0dW0pIHtcbiAgICAgICAgdGhpc1tkYXR1bV0gPSBkYXRhW2RhdHVtXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRDb21wb25lbnQobW9kdWxlLCBkYXRhKSB7XG4gIHJldHVybiBuZXcgd2luZG93W21vZHVsZV0oZGF0YSk7XG59XG4iLCIvLyBUT0RPOiBhbGxvdyBhIHNoYXJlZCBmcm9udGVuZC9iYWNrZW5kIHNjaGVtYSBmaWxlXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlTW9kZWwge1xuICBjb25zdHJ1Y3Rvcihtb2RlbE5hbWUsIHNjaGVtYSkge1xuICAgIHRoaXMubW9kZWxOYW1lID0gbW9kZWxOYW1lO1xuICAgIHRoaXMuZGF0YSA9IHNjaGVtYTtcbiAgfVxuXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgY29uc3QgZXhpc3RzSW5TY2hlbWEgPSB0aGlzLl9leGlzdHNJblNjaGVtYSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpO1xuICAgIGlmICghZXhpc3RzSW5TY2hlbWEpIHtcbiAgICAgIGNvbnNvbGUud2FybihgTm90IHNldHRpbmcgXCIke2tleX1cIiBpbiAke3RoaXMubW9kZWxOYW1lfSBtb2RlbCB0byBcIiR7dmFsdWV9XCIuIERvZXNudCBleGlzdCBpbiB0aGUgc2NoZW1hYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHR5cGVNYXRjaGVzID0gdGhpcy5fY2hlY2tUeXBlKHRoaXMuZGF0YSwga2V5LCB2YWx1ZSk7XG4gICAgaWYgKCF0eXBlTWF0Y2hlcykge1xuICAgICAgY29uc29sZS53YXJuKGBOb3Qgc2V0dGluZyBcIiR7a2V5fVwiIGluICR7dGhpcy5tb2RlbE5hbWV9IG1vZGVsIHRvIFwiJHt2YWx1ZX1cIi4gSXQgaXNudCB0aGUgcmlnaHQgdHlwZWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9zZXRWYWx1ZSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZ2V0KGFjY2Vzcykge1xuICAgIGxldCByZXR1cm5WYWx1ZTtcbiAgICBpZiAoYWNjZXNzKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IHRoaXMuX2dldFZhbHVlKHRoaXMuZGF0YSwgYWNjZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuVmFsdWUgPSB0aGlzLl9nZXREYXRhKHRoaXMuZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIF9leGlzdHNJblNjaGVtYShvYmosIGFjY2VzcywgdmFsdWUpIHtcbiAgICBsZXQgcmV0dXJuVmFsdWU7XG4gICAgY29uc3QgX2FjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PT0gJ3N0cmluZycpID8gYWNjZXNzLnNwbGl0KCcuJykgOiBhY2Nlc3M7XG4gICAgaWYgKF9hY2Nlc3MubGVuZ3RoID4gMSAmJiBvYmpbX2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVyblZhbHVlID0gdGhpcy5fZXhpc3RzSW5TY2hlbWEob2JqW19hY2Nlc3Muc2hpZnQoKV0udmFsdWUsIF9hY2Nlc3MsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvYmpbX2FjY2Vzc1swXV0gPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIF9jaGVja1R5cGUob2JqLCBhY2Nlc3MsIHZhbHVlKSB7XG4gICAgbGV0IHJldHVyblZhbHVlO1xuICAgIGNvbnN0IF9hY2Nlc3MgPSAodHlwZW9mKGFjY2VzcykgPT09ICdzdHJpbmcnKSA/IGFjY2Vzcy5zcGxpdCgnLicpIDogYWNjZXNzO1xuICAgIGlmIChfYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW19hY2Nlc3NbMF1dKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IHRoaXMuX2NoZWNrVHlwZShvYmpbX2FjY2Vzcy5zaGlmdCgpXS52YWx1ZSwgX2FjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9ialtfYWNjZXNzWzBdXS50eXBlID09PSB0eXBlb2YgdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIF9nZXREYXRhKG9iaiwgbmV3T2JqID0ge30pIHtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqW2VsZW1lbnRdLnR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG5ld09ialtlbGVtZW50XSA9IHt9O1xuICAgICAgICB0aGlzLl9nZXREYXRhKG9ialtlbGVtZW50XS52YWx1ZSwgbmV3T2JqW2VsZW1lbnRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtlbGVtZW50XSA9IG9ialtlbGVtZW50XS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfVxuXG4gIF9zZXRWYWx1ZShvYmosIGFjY2VzcywgdmFsdWUpIHtcbiAgICBjb25zdCBfYWNjZXNzID0gKHR5cGVvZihhY2Nlc3MpID09PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoX2FjY2Vzcy5sZW5ndGggPiAxICYmIG9ialtfYWNjZXNzWzBdXS52YWx1ZSkge1xuICAgICAgdGhpcy5fc2V0VmFsdWUob2JqW19hY2Nlc3Muc2hpZnQoKV0udmFsdWUsIF9hY2Nlc3MsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9ialtfYWNjZXNzWzBdXS52YWx1ZSkge1xuICAgICAgb2JqW19hY2Nlc3NbMF1dLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgX2dldFZhbHVlKG9iaiwgYWNjZXNzKSB7XG4gICAgbGV0IHJldHVyblZhbHVlO1xuICAgIGxldCBfYWNjZXNzID0gYWNjZXNzO1xuICAgIF9hY2Nlc3MgPSAodHlwZW9mKGFjY2VzcykgPT09ICdzdHJpbmcnKSA/IF9hY2Nlc3Muc3BsaXQoJy4nKSA6IF9hY2Nlc3M7XG4gICAgaWYgKF9hY2Nlc3MubGVuZ3RoID4gMSAmJiBvYmpbX2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVyblZhbHVlID0gdGhpcy5fZ2V0VmFsdWUob2JqW19hY2Nlc3Muc2hpZnQoKV0udmFsdWUsIF9hY2Nlc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9ialtfYWNjZXNzWzBdXS52YWx1ZSB8fCAnJztcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgc2V0IGVuZHBvaW50UHJlZml4KHByZWZpeCkge1xuICAgIHRoaXMuX2VuZHBvaW50UHJlZml4ID0gcHJlZml4O1xuICB9XG5cbiAgZ2V0IGVuZHBvaW50UHJlZml4KCkge1xuICAgIHJldHVybiB0aGlzLl9lbmRwb2ludFByZWZpeCB8fCAnYXBpL3ZpJztcbiAgfVxuXG4gIC8vIFRPRE86IHJlZmFjdG9yIHRoaXMgdG8gaGVscGVyXG4gIF9jaGVja1N0YXR1cyhyZXNwb25zZSkge1xuICAgIGxldCByZXR1cm5WYWx1ZTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICAgIHJldHVyblZhbHVlID0gcmVzcG9uc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgICAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICBfcGFyc2VKU09OKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfVxuXG4gIC8vIFRPRE86IENSVUQgb3BlcmF0aW9ucyB4aHIgY2FsbHMuIHJldHVybiBwcm9taXNlc1xuICBzYXZlKGlkID0gdGhpcy5nZXQoJ2lkJykpIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgY29uc3Qgc2VuZE9iaiA9IHt9O1xuICAgIGNvbnN0IHhoclByb3BlcnRpZXMgPSB7XG4gICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNlbmRPYmopLFxuICAgIH07XG5cbiAgICBzZW5kT2JqW3RoaXMubW9kZWxOYW1lXSA9IHRoaXMuZ2V0KCk7XG4gICAgY29uc29sZS5sb2coYG1ha2UgcG9zdCB4aHIgY2FsbCB0byAke3VybH1gLCBzZW5kT2JqKTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHhoclByb3BlcnRpZXMpXG4gICAgICAudGhlbih0aGlzLl9jaGVja1N0YXR1cylcbiAgICAgIC50aGVuKHRoaXMuX3BhcnNlSlNPTik7XG4gIH1cblxuICBmZXRjaChpZCA9IHRoaXMuZ2V0KCdpZCcpKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5lbmRwb2ludFByZWZpeH0vJHt0aGlzLm1vZGVsTmFtZX0vJHtpZH1gO1xuICAgIGNvbnN0IHhoclByb3BlcnRpZXMgPSB7XG4gICAgICBtZXRob2Q6ICdnZXQnLFxuICAgIH07XG4gICAgY29uc29sZS5sb2coYG1ha2UgZ2V0IHhociBjYWxsIHRvICR7dXJsfWApO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwgeGhyUHJvcGVydGllcylcbiAgICAgIC50aGVuKHRoaXMuX2NoZWNrU3RhdHVzKVxuICAgICAgLnRoZW4odGhpcy5fcGFyc2VKU09OKTtcbiAgfVxuXG4gIHVwZGF0ZShpZCA9IHRoaXMuZ2V0KCdpZCcpKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5lbmRwb2ludFByZWZpeH0vJHt0aGlzLm1vZGVsTmFtZX0vJHtpZH1gO1xuICAgIGNvbnN0IHNlbmRPYmogPSB7fTtcbiAgICBzZW5kT2JqW3RoaXMubW9kZWxOYW1lXSA9IHRoaXMuZ2V0KCk7XG4gICAgY29uc29sZS5sb2coYG1ha2UgdXBkYXRlIHhociBjYWxsIHRvICR7dXJsfWAsIHNlbmRPYmopO1xuXG4gICAgLy8gR2l0aHViJ3MgZmV0Y2ggcHJvamVjdCBkb2VzbnQgYXBwZWFyIHRvIHN1cHBvcnQgVVBEQVRFXG4gICAgLy8gVE9ETzogaW52ZXN0aWdhdGUgdGhlIGFib3ZlIHN0YXRlbWVudFxuICAgIC8vIGZldGNoKHVybCwge1xuICAgIC8vICAgbWV0aG9kOiAnVVBEQVRFJyxcbiAgICAvLyAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNlbmRPYmopXG4gICAgLy8gfSk7XG4gIH1cblxuICBkZXN0cm95KGlkID0gdGhpcy5nZXQoJ2lkJykpIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgY29uc3QgeGhyUHJvcGVydGllcyA9IHtcbiAgICAgIG1ldGhvZDogJ2RlbGV0ZScsXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSBkZWxldGUgeGhyIGNhbGwgdG8gJHt1cmx9YCk7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB4aHJQcm9wZXJ0aWVzKVxuICAgICAgLnRoZW4odGhpcy5fY2hlY2tTdGF0dXMpXG4gICAgICAudGhlbih0aGlzLl9wYXJzZUpTT04pO1xuICB9XG59XG4iLCIvLyBhbGxvd2luZyBmb3IuLm9mIG9mIG5vZGVsaXN0cyBmb3IgQ2hyb21lIHN1cHBvcnRcbk5vZGVMaXN0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl07XG5pbXBvcnQge1V0aWxzfSBmcm9tICcuL1V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZGluZyB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuX2ZpbmRCaW5kYWJsZSgpO1xuICAgIHRoaXMudXRpbHMgPSBuZXcgVXRpbHMoKTtcblxuICAgIGxldCBjdXJyZW50RGF0YSA9IGN1cnJlbnREYXRhIHx8IHt9O1xuXG4gICAgLy8gd2F0Y2hpbmcgdGhpcy5kYXRhIGZvciBwcm9ncmFtbWF0aWNhbCB1cGRhdGVzXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMudXRpbHMuY29tcGFyZShjdXJyZW50RGF0YSwgdGhpcy5kYXRhKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY3VycmVudERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpO1xuICAgICAgICB0aGlzLl9wb3B1bGF0ZUJpbmRpbmdzKCk7XG4gICAgICB9XG4gICAgfSwgMTApO1xuICB9XG5cbiAgX3BvcHVsYXRlQmluZGluZ3MoKSB7XG4gICAgZm9yIChjb25zdCBlbG0gb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2xpYWlzb24tYmluZF0nKSkge1xuICAgICAgY29uc3QgYmluZE5hbWUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnbGlhaXNvbi1iaW5kJyk7XG5cbiAgICAgIC8vIHByZXZlbnQgdGhlIGlucHV0IHlvdXJlIHR5cGluZyBpbiBmcm9tIHVwZGF0aW5nLiBwcmV2ZW50cyB0aGUgY3Vyc29yIGZyb20ganVtcGluZyB0byB0aGUgZW5kXG4gICAgICAvLyBvbmx5IHVwZGF0ZXMgYmluZGluZ3MgdGhhdCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgICAgIGlmIChlbG0gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKGVsbS5nZXRBdHRyaWJ1dGUoJ2xpYWlzb24tYmluZCcpID09PSBiaW5kTmFtZSB8fCBiaW5kTmFtZSA9PT0gbnVsbCkpIHtcbiAgICAgICAgdGhpcy5fc2V0RWxlbWVudENvbnRlbnQoZWxtLCB0aGlzLl9nZXRWYWx1ZSh0aGlzLmRhdGEsIGVsbS5nZXRBdHRyaWJ1dGUoJ2xpYWlzb24tYmluZCcpKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2ZpbmRCaW5kYWJsZSgpIHtcbiAgICBmb3IgKGNvbnN0IGVsbSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbbGlhaXNvbi1iaW5kXScpKSB7XG4gICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAvLyBzZXR0aW1lb3V0IGFsbG93cyB0aGUga2V5ZG93biBldmVudCBnbyBnZXQgdGhlIG5ldyB2YWx1ZVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX3NldFZhbHVlKHRoaXMuZGF0YSwgZWxtLmdldEF0dHJpYnV0ZSgnbGlhaXNvbi1iaW5kJyksIGV2ZW50LnNyY0VsZW1lbnQudmFsdWUpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRFbGVtZW50Q29udGVudChlbGVtZW50LCB2YWx1ZSkge1xuICAgIC8vIGFsbG93cyBtdWx0aXBsZSBjb21wb25lbnRzXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIF9zZXRWYWx1ZShvYmosIGFjY2VzcywgdmFsdWUpIHtcbiAgICBsZXQgX2FjY2VzcyA9IGFjY2VzcztcbiAgICBpZiAodHlwZW9mKF9hY2Nlc3MpID09PSAnc3RyaW5nJykge1xuICAgICAgX2FjY2VzcyA9IF9hY2Nlc3Muc3BsaXQoJy4nKTtcbiAgICB9XG4gICAgaWYgKF9hY2Nlc3MubGVuZ3RoID4gMSAmJiBvYmpbX2FjY2Vzc1swXV0pIHtcbiAgICAgIHRoaXMuX3NldFZhbHVlKG9ialtfYWNjZXNzLnNoaWZ0KCldLCBfYWNjZXNzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW19hY2Nlc3NbMF1dID09PSAnc3RyaW5nJykge1xuICAgICAgb2JqW19hY2Nlc3NbMF1dID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgX2dldFZhbHVlKG9iaiwgYWNjZXNzKSB7XG4gICAgbGV0IF9hY2Nlc3MgPSBhY2Nlc3M7XG4gICAgbGV0IHJldHVyblZhbHVlO1xuICAgIGlmICh0eXBlb2YoX2FjY2VzcykgPT09ICdzdHJpbmcnKSB7XG4gICAgICBfYWNjZXNzID0gX2FjY2Vzcy5zcGxpdCgnLicpO1xuICAgIH1cbiAgICBpZiAoX2FjY2Vzcy5sZW5ndGggPiAxICYmIG9ialtfYWNjZXNzWzBdXSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSB0aGlzLl9nZXRWYWx1ZShvYmpbX2FjY2Vzcy5zaGlmdCgpXSwgX2FjY2Vzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVyblZhbHVlID0gb2JqW19hY2Nlc3NbMF1dO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICByZWZyZXNoKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuX3BvcHVsYXRlQmluZGluZ3MoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtVdGlsc30gZnJvbSAnLi9VdGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXRpbHMgPSBuZXcgVXRpbHMoKTtcbiAgICB0aGlzLnZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbGlhaXNvbi12aWV3XScpO1xuICAgIHRoaXMucGF0aHMgPSBbXTtcbiAgICB0aGlzLndpbGRjYXJkcyA9IFtdO1xuICAgIC8vIGdvZXMgdG8gaGFzaCB1cmxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZ28od2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpKSwgMCk7XG4gICAgLy8gYWxsb3dzIGJhY2svZm9yd2FyZCBidXR0b25zXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgKGV2ZW50KSA9PiB0aGlzLmdvKGV2ZW50LnN0YXRlIHx8IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSwgZmFsc2UpKTtcbiAgfVxuXG4gIHN0YXRlKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5uYW1lLmluZGV4T2YoJzonKSA+IDApIHtcbiAgICAgIHRoaXMud2lsZGNhcmRzLnB1c2goZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGF0aHMucHVzaChkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmYWxsYmFjayhkYXRhKSB7XG4gICAgdGhpcy5wYXRocy5wdXNoKGRhdGEpO1xuICAgIHRoaXMuX2ZhbGxiYWNrID0gZGF0YTtcbiAgfVxuXG4gIC8vIGludGVncmF0aW9uIHRlc3RzIGNvdmVyIHRoaXNcbiAgZ28ocm91dGUpIHtcbiAgICBjb25zb2xlLmxvZyhgZ29pbmcgdG8gc3RhdGUgJHtyb3V0ZX1gKTtcbiAgICBjb25zdCBvYmogPSB0aGlzLl9maW5kUm91dGVJblBhdGhzKHJvdXRlKTtcbiAgICBpZiAoIW9iaikge1xuICAgICAgdGhpcy5nbyh0aGlzLl9mYWxsYmFjay5uYW1lKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZmV0Y2gob2JqLnRlbXBsYXRlVXJsKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICB9KS50aGVuKCh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgICB0aGlzLnZpZXcuaW5uZXJIVE1MID0gdGVtcGxhdGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIFRPRE86IGNsZWFuIHRoaXMgdXAuIHRoZXJlIGhhcyB0byBiZSBhIGJldHRlciB3YXlcbiAgX2ZpbmRSb3V0ZUluUGF0aHMocm91dGUpIHtcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgdGhpcy5wYXRocykge1xuICAgICAgaWYgKHBhdGgubmFtZSA9PT0gcm91dGUpIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdCBfcm91dGUgPSByb3V0ZS5zdWJzdHJpbmcoMSkuc3BsaXQoJy8nKTtcbiAgICBmb3IgKGNvbnN0IHdpbGRjYXJkIG9mIHRoaXMud2lsZGNhcmRzKSB7XG4gICAgICBjb25zdCBfd2lsZGNhcmQgPSB3aWxkY2FyZC5uYW1lLnN1YnN0cmluZygxKS5zcGxpdCgnLycpO1xuICAgICAgaWYgKF93aWxkY2FyZC5sZW5ndGggPT09IF9yb3V0ZS5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwLCBsZW4gPSBfd2lsZGNhcmQubGVuZ3RoOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChfd2lsZGNhcmRbaW5kZXhdLmluZGV4T2YoJzonKSA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgdGVtcCA9IF93aWxkY2FyZDtcbiAgICAgICAgICAgIHRlbXBbaW5kZXhdID0gX3JvdXRlW2luZGV4XTtcbiAgICAgICAgICAgIGlmICh0aGlzLnV0aWxzLmNvbXBhcmUodGVtcCwgX3JvdXRlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gd2lsZGNhcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyAqIG9uIHBhZ2UgbG9hZCwgZ2V0IHVybCBhbmQgbG9hZCBhcHByb3ByaWF0ZSB0ZW10cGxhdGVcbi8vICogb24gdXJsIGNoYW5nZSwgdXBkYXRlIHRlbXBsYXRlXG4vLyAqIGFsbG93IHdpbGRjYXJkcyBpbiBwYXRocyAvdGVtcGxhdGUvdXNlci86aWRcbi8vIHBhc3MgdmFyaWFibGVzIHRvIHRlbXBsYXRlXG4vLyBhbGxvdyBjb21wb25lbnQgdG8gYmUgZGVjbGFyZWQgaW4gcm91dGUgb2JqZWN0XG4vLyAqIGdldCBzdGF0ZSAoaWYgc3RhdGUgPT0gJ2h1aG9ob2hhbycpLi4uXG4vLyAqIHVwZGF0ZSBzdGF0ZSBvbiBmb3J3YXJkL2JhY2tcbi8vICogcm91dGVzIG9uIHJlZnJlc2hcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIF9oYXNoZXIodmFsKSB7XG4gICAgbGV0IGhhc2ggPSAwO1xuICAgIGxldCBpbmRleDtcbiAgICBsZXQgbGVuO1xuICAgIGNvbnN0IHN0cmluZyA9IHZhbC50b1N0cmluZygpO1xuICAgIGZvciAoaW5kZXggPSAwLCBsZW4gPSBzdHJpbmcubGVuZ3RoOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgaGFzaCA9ICgoKGhhc2ggPDwgNSkgLSBoYXNoKSArIHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KSkgJiAweEZGRkZGRkZGO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIF9vYmplY3Qoc2VsZiwgb2JqLCByZXN1bHQgPSAwKSB7XG4gICAgbGV0IF9yZXN1bHQgPSByZXN1bHQ7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BlcnR5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdChzZWxmLCBvYmpbcHJvcGVydHldLCBfcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcGVydHkpKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gc2VsZi5faGFzaGVyKHByb3BlcnR5ICsgc2VsZi5faGFzaGVyKG9ialtwcm9wZXJ0eV0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH1cblxuICBoYXNoKGlucHV0KSB7XG4gICAgY29uc3QgdHlwZXMgPSB7XG4gICAgICAnc3RyaW5nJzogdGhpcy5faGFzaGVyLFxuICAgICAgJ251bWJlcic6IHRoaXMuX2hhc2hlcixcbiAgICAgICdib29sZWFuJzogdGhpcy5faGFzaGVyLFxuICAgICAgJ29iamVjdCc6IHRoaXMub2JqZWN0LFxuICAgIH07XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBpbnB1dDtcblxuICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiB0eXBlc1t0eXBlXSA/IHR5cGVzW3R5cGVdKHRoaXMsIGlucHV0KSArIHRoaXMuX2hhc2hlcih0eXBlKSA6IDA7XG4gIH1cblxuICBjb21wYXJlSGFzaGVzKGl0ZW1BLCBpdGVtQikge1xuICAgIHJldHVybiB0aGlzLmhhc2goaXRlbUEpID09PSB0aGlzLmhhc2goaXRlbUIpO1xuICB9XG5cbiAgLy8gZmFzdGVyIHRoYW4gY29tcGFyZUhhc2hlc1xuICBjb21wYXJlKGl0ZW1BLCBpdGVtQikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShpdGVtQSkgPT09IEpTT04uc3RyaW5naWZ5KGl0ZW1CKTtcbiAgfVxufVxuIiwiaW1wb3J0IExpYWlzb24gZnJvbSAnLi9MaWFpc29uJztcbmltcG9ydCBCaW5kaW5nIGZyb20gJy4vQmluZGluZyc7XG5pbXBvcnQgVXNlck1vZGVsIGZyb20gJy4vVXNlck1vZGVsJztcbmltcG9ydCBWaWV3TW9kZWwgZnJvbSAnLi9WaWV3TW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeGFtcGxlIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuYmluZCA9IG5ldyBMaWFpc29uKGRhdGEpO1xuICAgIGNvbnNvbGUubG9nKHRoaXMuYmluZCk7XG4gICAgdGhpcy5iaW5kaW5nID0gbmV3IEJpbmRpbmcodGhpcy5iaW5kKTtcbiAgICB0aGlzLmV4YW1wbGVCaW5kaW5nKCk7XG4gICAgdGhpcy5leGFtcGxlUm91dGVyKCk7XG4gIH1cblxuICBleGFtcGxlQmluZGluZygpIHtcbiAgICAvLyBoZXJlIHlvdSBoYXZlIGFjY2VzcyB0byB0aGlzLmJpbmQudXNlciBhbmQgdGhpcy5iaW5kLnByb2dyYW1taW5nX2xhbmd1YWdlc1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuYmluZC51c2VyKTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmJpbmQucHJvZ3JhbW1pbmdfbGFuZ3VhZ2VzKTtcblxuICAgIC8vIG1vZGVsIGV4YW1wbGVzXG4gICAgY29uc3QgdXNlciA9IG5ldyBVc2VyTW9kZWwoKTtcbiAgICB1c2VyLnNldCgnYWdlJywgJzg3NzcnKTsgLy8gc2hvdWxkIGZhaWxcbiAgICB1c2VyLnNldCgnbmFtZScsICdteSBmaXJzdCBuYW1lIG9uIHVzZXIgbW9kZWwnKTsgLy8gc2hvdWxkIHBhc3NcbiAgICB1c2VyLnNldCgnYWdlJywge1xuICAgICAgYWdlOiAzMyxcbiAgICB9KTsgLy8gc2hvdWxkIGZhaWxcbiAgICB1c2VyLnNldCgnYWdlJywgOTk5KTsgLy8gc2hvdWxkIHBhc3NcbiAgICB1c2VyLnNldCgnYWRkcmVzcycsICdteSBhZGRyZXNzJyk7IC8vIHNob3VsZCBwYXNzXG5cbiAgICAvLyBzZXRzIGRhdGEgYmluZGluZ1xuICAgIC8vIHRoaXMuYmluZC51c2VyLm5hbWUgPSB1c2VyLmdldCgnbmFtZScpXG4gICAgdXNlci5zZXQoJ2FkZHJlc3MnLCB1c2VyLnVwQ2FzZSgnbXkgc2Vjb25kIGFkZHJlc3MnKSk7IC8vIHNob3VsZCBwYXNzIGFuZCBwb3N0Zml4IFwiIVwiIHRvIHRoZSBhZGRyZXNzXG5cbiAgICB1c2VyLnNhdmUoKS50aGVuKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVuJyk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVxdWVzdCBmYWlsZWQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgdXNlci51cGRhdGUoKTtcbiAgICB1c2VyLmZldGNoKCkudGhlbigoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygndGhlbicpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3QgZmFpbGVkJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHVzZXIuZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3RoZW4nKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0IGZhaWxlZCcsIGVycm9yKTtcbiAgICB9KTtcblxuICAgIC8vIHNlY29uZCBtb2RlbFxuICAgIGNvbnN0IHZpZXdtb2RlbCA9IG5ldyBWaWV3TW9kZWwoKTtcbiAgICAvLyBzaG91bGQgcGFzc1xuICAgIHZpZXdtb2RlbC5zZXQoJ3NpbmdsZScsICd1cGRhdGVkIHZpYSB2aWV3bW9kZWwgbW9kZWwgc2V0IGZ1bmN0aW9uJyk7XG4gICAgLy8gc2hvdWxkIHBhc3NcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLm5hbWUnLCAnbXkgc2Vjb25kIGV4YW1wbGUgbmFtZScpO1xuICAgIC8vIHNob3VsZCBmYWlsXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZ2UnLCB7XG4gICAgICBhZ2U6IDIyLFxuICAgIH0pO1xuICAgIC8vIHNob3VsZCBmYWlsXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZ2UnLCA0NDQpO1xuICAgIC8vIHNob3VsZCBmYWlsXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZGRyZXNzJywgNzc4NzgpO1xuICAgIC8vIHNob3VsZCBwYXNzXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZGRyZXNzJywgJ215IHNlY29uZCBhZGRyZXNzJyk7XG5cbiAgICAvLyBzZXRzIGRhdGEgYmluZGluZ1xuICAgIC8vIHRoaXMuYmluZCA9IHZpZXdtb2RlbC5nZXQoKVxuICAgIC8vIHRoaXMuYmluZC51c2VyID0gdXNlci5nZXQoKVxuICAgIHRoaXMuYmluZGluZy5yZWZyZXNoKHRoaXMuYmluZCk7XG4gIH1cblxuICBleGFtcGxlUm91dGVyKCkge1xuICAgIC8vIGNoYW5nZSBzdGF0ZSB0byAvbGlzdFxuICAgIC8vIHJvdXRlci5nbygnaG9kb3IvMTInLCB7bXlkYXRhOjEyMzQ1NTYsIG15b2JqOntuYW1lOidzaGVybG9jayd9fSk7XG4gICAgLy8gc2V0VGltZW91dCgoKT0+IHdpbmRvdy5yb3V0ZXIuZ28oJ2xpc3QnKSwyMDAwKVxuICB9XG59XG4iLCJpbXBvcnQgTGlhaXNvbiBmcm9tICcuL0xpYWlzb24nO1xuaW1wb3J0IEJpbmRpbmcgZnJvbSAnLi9CaW5kaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhhbXBsZTIge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5iaW5kID0gbmV3IExpYWlzb24oZGF0YSk7XG4gICAgdGhpcy5iaW5kaW5nID0gbmV3IEJpbmRpbmcodGhpcy5iaW5kKTtcbiAgICAgIC8vIHRoaXMuYW5vdGhlckZ1bmN0aW9uKClcbiAgfVxuXG4gIGFub3RoZXJGdW5jdGlvbigpIHtcbiAgICAvLyBoZXJlIHlvdSBoYXZlIGFjY2VzcyB0byB0aGlzLmRhdGEudXNlciBhbmQgdGhpcy5kYXRhLnByb2dyYW1taW5nX2xhbmd1YWdlc1xuICAgIGNvbnNvbGUubG9nKHRoaXMuYmluZC5zdHJpbmcpO1xuICB9XG59XG4iLCIvLyBwdXRzIHJvdXRlcyBvbiB0aGUgcm91dGVyIGNsYXNzXG5cbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuLy8gVE9ETzogbm90IGF0dGFjaCB0aGlzIHRvIHRoZSBnbG9iYWwgbmFtZXNwYWNlXG53aW5kb3cucm91dGVyID0gd2luZG93LnJvdXRlciB8fCBuZXcgUm91dGVyKCk7XG53aW5kb3cucm91dGVyLnN0YXRlKHtcbiAgbmFtZTogJy91c2VycycsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJpbmRleC5odG1sJyxcbn0pLnN0YXRlKHtcbiAgbmFtZTogJy91c2VyLzppZCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXIuaHRtbCcsXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvdXNlci86aWQvZGV0YWlscycsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJkZXRhaWxzLmh0bWwnLFxufSkuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXIvOmlkLzpzdWJpZCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJzdWIuaHRtbCcsXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL2xpc3QuaHRtbCcsXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvbGlzdC5odG1sJyxcbn0pLmZhbGxiYWNrKHtcbiAgbmFtZTogJy80MDQnLFxuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy80MDQuaHRtbCcsXG59KTtcbiIsImltcG9ydCBCYXNlTW9kZWwgZnJvbSAnLi9CYXNlTW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgVXNlck1vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3VzZXInLCB7XG4gICAgICBpZDoge1xuICAgICAgICB2YWx1ZTogNzg5Nzg3LFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIH0sXG4gICAgICBuYW1lOiB7XG4gICAgICAgIHZhbHVlOiAnbmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgfSxcbiAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgdmFsdWU6ICcyMjFiIGJha2UnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIH0sXG4gICAgICBhZ2U6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGV4YW1wbGUgbW9kZWwgaGVscGVyXG4gIHVwQ2FzZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBCYXNlTW9kZWwgZnJvbSAnLi9CYXNlTW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgVmlld01vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3ZpZXcnLCB7XG4gICAgICBzaW5nbGU6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIHZhbHVlOiAnZnJvbSBzY2hlbWEnLFxuICAgICAgfSxcbiAgICAgIHVzZXI6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgdmFsdWU6IDg4ODg4LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICB2YWx1ZTogJ1NoZXJsb2NrIEhvbG1lcycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIHZhbHVlOiAnMjIxYiBCYWtlciBTdHJlZXQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcHJvZ3JhbW1pbmdMYW5ndWFnZXM6IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgdmFsdWU6IFsnamF2YXNjcmlwdCcsICdydWJ5J10sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
