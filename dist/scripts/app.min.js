"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function loadComponent(e,t){new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this._existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". Doesnt exist in the schema');var r=this._checkType(this.data,e,t);return r?void this._setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". It isnt the right type')}},{key:"get",value:function(e){return e?this._getValue(this.data,e):this._getData(this.data)}},{key:"_existsInSchema",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this._existsInSchema(e[t.shift()].value,t,n):e[t[0]]?!0:!1}},{key:"_checkType",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this._checkType(e[t.shift()].value,t,n):e[t[0]].type===typeof n}},{key:"_getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this._getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"_setValue",value:function(e,t,n){t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]].value?this._setValue(e[t.shift()].value,t,n):e[t[0]].value&&(e[t[0]].value=n)}},{key:"_getValue",value:function(e,t){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this._getValue(e[t.shift()].value,t):e[t[0]].value||""}},{key:"_checkStatus",value:function(e){if(e.status>=200&&e.status<300)return e;var t=new Error(e.statusText);throw t.response=e,t}},{key:"_parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,{method:"post",body:JSON.stringify(n)}).then(this._checkStatus).then(this._parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make get xhr call to "+t),fetch(t,{method:"get"}).then(this._checkStatus).then(this._parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make delete xhr call to "+t),fetch(t,{method:"delete"}).then(this._checkStatus).then(this._parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this._findBindable(),this.utils=new Utils;var r=r||{};setInterval(function(){n.utils.compare(r,n.data)===!1&&(r=JSON.parse(JSON.stringify(n.data)),n._populateBindings())},10)}return _createClass(e,[{key:"_populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,a=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(r=a.next()).done);e=!0){var i=r.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this._setElementContent(i,this._getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&a["return"]&&a["return"]()}finally{if(t)throw n}}}},{key:"_findBindable",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var a,i=function(){var t=a.value;t.addEventListener("keydown",function(n){setTimeout(function(){return e._setValue(e.data,t.getAttribute("liaison-bind"),n.srcElement.value)})})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(a=o.next()).done);t=!0)i()}catch(s){n=!0,r=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}}},{key:"_setElementContent",value:function(e,t){void 0!==t&&(e.innerHTML=t,e.value=t)}},{key:"_setValue",value:function(e,t,n){"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this._setValue(e[t.shift()],t,n):"string"==typeof e[t[0]]&&(e[t[0]]=n)}},{key:"_getValue",value:function(e,t){return"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this._getValue(e[t.shift()],t):e[t[0]]}},{key:"refresh",value:function(e){this.data=e,this._populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);var n=void 0;for(n in t)this[n]=t[n]},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.utils=new Utils,this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this._findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"_findRouteInPaths",value:function(e){var t=!0,n=!1,r=void 0;try{for(var a,i=this.paths[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var o=a.value;if(o.name===e)return o}}catch(s){n=!0,r=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}e=e.substring(1).split("/");var l=!0,u=!1,c=void 0;try{for(var h,f=this.wildcards[Symbol.iterator]();!(l=(h=f.next()).done);l=!0){var d=h.value,p=d.name.substring(1).split("/");if(p.length===e.length)for(var v=0,y=p.length;y>v;v++)if(0===p[v].indexOf(":")){var g=p;if(g[v]=e[v],this.utils.compare(g,e))return d}}}catch(s){u=!0,c=s}finally{try{!l&&f["return"]&&f["return"]()}finally{if(u)throw c}}return!1}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Utils=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_hasher",value:function(e){var t=0,n=void 0,r=void 0,a=e.toString();for(n=0,r=a.length;r>n;n++)t=(t<<5)-t+a.charCodeAt(n)&4294967295;return t}},{key:"object",value:function(e,t){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];for(var r in t){if("object"==typeof t[r])return this.object(e,t[r],n);hasOwnProperty.call(t,r)&&(n+=e._hasher(r+e._hasher(t[r])))}return n}},{key:"hash",value:function(e){var t={string:this._hasher,number:this._hasher,"boolean":this._hasher,object:this.object},n=typeof e;return null!=e&&t[n]?t[n](this,e)+this._hasher(n):0}},{key:"compareHashes",value:function(e,t){return this.hash(e)===this.hash(t)}},{key:"compare",value:function(e,t){return JSON.stringify(e)===JSON.stringify(t)}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programming_languages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel);
//# sourceMappingURL=data:application/json;base64,
