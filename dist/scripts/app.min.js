"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function load_component(e,t){new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this.existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'" because it doesnt exist in the schema');var a=this.checkType(this.data,e,t);return a?void this.setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'" because it it isnt the right type')}},{key:"get",value:function(e){return e?this.getValue(this.data,e):this.getData(this.data)}},{key:"existsInSchema",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.existsInSchema(e[t.shift()].value,t,n):e[t[0]]?!0:!1}},{key:"checkType",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.checkType(e[t.shift()].value,t,n):e[t[0]].type===typeof n}},{key:"getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this.getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"setValue",value:function(e,t,n){t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]].value?this.setValue(e[t.shift()].value,t,n):e[t[0]].value&&(e[t[0]].value=n)}},{key:"getValue",value:function(e,t){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.getValue(e[t.shift()].value,t):e[t[0]].value||""}},{key:"checkStatus",value:function(e){if(e.status>=200&&e.status<300)return e;var t=new Error(e.statusText);throw t.response=e,t}},{key:"parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,{method:"post",body:JSON.stringify(n)}).then(this.checkStatus).then(this.parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make get xhr call to "+t),fetch(t,{method:"get"}).then(this.checkStatus).then(this.parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make delete xhr call to "+t),fetch(t,{method:"delete"}).then(this.checkStatus).then(this.parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this.findBindable(),this.hash=new Hasher;var a=a||{};setInterval(function(){JSON.stringify(a)!==JSON.stringify(n.data)&&(a=JSON.parse(JSON.stringify(n.data)),n.populateBindings())},10)}return _createClass(e,[{key:"populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var a,r=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(a=r.next()).done);e=!0){var i=a.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this.setElementContent(i,this.getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&r["return"]&&r["return"]()}finally{if(t)throw n}}}},{key:"findBindable",value:function(){var e=this,t=!0,n=!1,a=void 0;try{for(var r,i=function(){var t=r.value;t.addEventListener("keydown",function(n){setTimeout(function(){return e.setValue(e.data,t.getAttribute("liaison-bind"),n.srcElement.value)})})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(r=o.next()).done);t=!0)i()}catch(s){n=!0,a=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw a}}}},{key:"setElementContent",value:function(e,t){void 0!==t&&(e.innerHTML=t,e.value=t)}},{key:"setValue",value:function(e,t,n){"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this.setValue(e[t.shift()],t,n):"string"==typeof e[t[0]]&&(e[t[0]]=n)}},{key:"getValue",value:function(e,t){return"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this.getValue(e[t.shift()],t):e[t[0]]}},{key:"refresh",value:function(e){this.data=e,this.populateBindings()}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Hasher=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"hash",value:function t(e){var t=0,n=void 0,a=void 0,r=e.toString();for(n=0,a=r.length;a>n;n++)t=(t<<5)-t+r.charCodeAt(n)&4294967295;return t}},{key:"object",value:function(e,t){var n=0;for(var a in t){if("object"==typeof t[a])return this.object(e,t[a]);hasOwnProperty.call(t,a)&&(n+=e.hash(a+e.hash(t[a])))}return n}},{key:"value",value:function(e){var t={string:this.hash,number:this.hash,"boolean":this.hash,object:this.object},n=typeof e;return null!=e&&t[n]?t[n](this,e)+this.hash(n):0}},{key:"compare",value:function(e,t){return this.value(e)===this.value(t)}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);var n=void 0;for(n in t)this[n]=t[n]},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this.findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"findRouteInPaths",value:function(e){var t=!0,n=!1,a=void 0;try{for(var r,i=this.paths[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var o=r.value;if(o.name===e)return o}}catch(s){n=!0,a=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw a}}console.log("not found natural path. searching wildcards"),e=e.substring(1).split("/");var l=!0,u=!1,c=void 0;try{for(var h,f=this.wildcards[Symbol.iterator]();!(l=(h=f.next()).done);l=!0){var d=h.value,v=d.name.substring(1).split("/");if(v.length===e.length)for(var p=0,g=v.length;g>p;p++)if(0===v[p].indexOf(":")){var y=v;if(y[p]=e[p],this.isIdentical(y,e))return d}}}catch(s){u=!0,c=s}finally{try{!l&&f["return"]&&f["return"]()}finally{if(u)throw c}}return console.log("going to fallback"),!1}},{key:"isIdentical",value:function(e,t){var n=e.length;if(n!=t.length)return!1;for(;n--;)if(e[n]!==t[n])return!1;return!0}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,o=n;s=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=o,a=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,o=n;s=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=o,a=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programming_languages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJMaWFpc29uLmpzIiwiQmFzZU1vZGVsLmpzIiwiQmluZGluZy5qcyIsIkhhc2hlci5qcyIsIlJvdXRlci5qcyIsInNjcmlwdHMvRXhhbXBsZS5qcyIsInNjcmlwdHMvRXhhbXBsZTIuanMiLCJzY3JpcHRzL1JvdXRlcy5qcyIsInNjcmlwdHMvVXNlck1vZGVsLmpzIiwic2NyaXB0cy9WaWV3TW9kZWwuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImxvYWRfY29tcG9uZW50IiwibW9kdWxlIiwiZGF0YSIsIndpbmRvdyIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJCYXNlTW9kZWwiLCJtb2RlbE5hbWUiLCJzY2hlbWEiLCJ0aGlzIiwiZXhpc3RzSW5TY2hlbWEiLCJjb25zb2xlIiwid2FybiIsInR5cGVNYXRjaGVzIiwiY2hlY2tUeXBlIiwic2V0VmFsdWUiLCJhY2Nlc3MiLCJnZXRWYWx1ZSIsImdldERhdGEiLCJvYmoiLCJzcGxpdCIsInNoaWZ0IiwidHlwZSIsIm5ld09iaiIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImVsZW1lbnQiLCJyZXNwb25zZSIsInN0YXR1cyIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwianNvbiIsImlkIiwiZ2V0IiwidXJsIiwiZW5kcG9pbnRQcmVmaXgiLCJzZW5kT2JqIiwibG9nIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJjaGVja1N0YXR1cyIsInBhcnNlSlNPTiIsIl9mZXRjaCIsImFwcGx5IiwidG9TdHJpbmciLCJzZXQiLCJwcmVmaXgiLCJfZW5kcG9pbnRQcmVmaXgiLCJOb2RlTGlzdCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJCaW5kaW5nIiwiX3RoaXMiLCJmaW5kQmluZGFibGUiLCJoYXNoIiwiSGFzaGVyIiwiY3VycmVudERhdGEiLCJzZXRJbnRlcnZhbCIsInBhcnNlIiwicG9wdWxhdGVCaW5kaW5ncyIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJuZXh0IiwiZG9uZSIsImVsbSIsImJpbmROYW1lIiwiYWN0aXZlRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInNldEVsZW1lbnRDb250ZW50IiwiZXJyIiwiX3RoaXMyIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfbG9vcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwic2V0VGltZW91dCIsInNyY0VsZW1lbnQiLCJfaXRlcmF0b3IyIiwiaW5uZXJIVE1MIiwidmFsIiwibCIsInN0cmluZyIsImNoYXJDb2RlQXQiLCJzZWxmIiwicmVzdWx0IiwicHJvcGVydHkiLCJvYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbnB1dCIsInR5cGVzIiwibnVtYmVyIiwiYm9vbGVhbiIsImEiLCJiIiwiTGlhaXNvbiIsImRhdHVtIiwiUm91dGVyIiwidmlldyIsInF1ZXJ5U2VsZWN0b3IiLCJwYXRocyIsIndpbGRjYXJkcyIsImdvIiwibG9jYXRpb24iLCJzdWJzdHJpbmciLCJldmVudCIsInN0YXRlIiwibmFtZSIsImluZGV4T2YiLCJwdXNoIiwiX2ZhbGxiYWNrIiwicm91dGUiLCJmaW5kUm91dGVJblBhdGhzIiwidGVtcGxhdGVVcmwiLCJ0ZXh0IiwidGVtcGxhdGUiLCJwYXRoIiwid2lsZGNhcmQiLCJfd2lsZGNhcmQiLCJ0ZW1wIiwiaXNJZGVudGljYWwiLCJFeGFtcGxlIiwiYmluZCIsImJpbmRpbmciLCJleGFtcGxlQmluZGluZyIsImV4YW1wbGVSb3V0ZXIiLCJ1c2VyIiwiVXNlck1vZGVsIiwiYWdlIiwidXBDYXNlIiwic2F2ZSIsInVwZGF0ZSIsImRlc3Ryb3kiLCJ2aWV3bW9kZWwiLCJWaWV3TW9kZWwiLCJyZWZyZXNoIiwiRXhhbXBsZTIiLCJyb3V0ZXIiLCJmYWxsYmFjayIsIl9nZXQiLCJfeCIsIl94MiIsIl94MyIsIl9hZ2FpbiIsInJlY2VpdmVyIiwiZGVzYyIsInBhcmVudCIsImdldHRlciIsIkZ1bmN0aW9uIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJfQmFzZU1vZGVsIiwiYWRkcmVzcyIsInN0ciIsInRvVXBwZXJDYXNlIiwic2luZ2xlIiwicHJvZ3JhbW1pbmdfbGFuZ3VhZ2VzIl0sIm1hcHBpbmdzIjoiQUFDQSxZQUlBLFNBQVNBLGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQWdNaEgsUUFBU0gsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBbUpoSCxRQUFTSCxpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0F5RGhILFFBQVNILGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQ3pZakcsUUFBU0MsZ0JBQWVDLEVBQVFDLEdBQzdDLEdBQUlDLFFBQU9GLEdBQVFDLEdEMFpyQixRQUFT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LE9BQVdvSSxHQUFTLEVBQXNCLE9BQVh6RCxJQUFpQkEsRUFBUzhELFNBQVNqTCxVQUFXLElBQUk4SyxHQUFPN0ssT0FBT2lMLHlCQUF5Qi9ELEVBQVFELEVBQVcsSUFBYTFFLFNBQVRzSSxFQUFKLENBQWlOLEdBQUksU0FBV0EsR0FBUSxNQUFPQSxHQUFLMUssS0FBZ0IsSUFBSTRLLEdBQVNGLEVBQUs3SCxHQUFLLE9BQWVULFVBQVh3SSxFQUErQnhJLE9BQW9Cd0ksRUFBTzNELEtBQUt3RCxHQUFwVSxHQUFJRSxHQUFTOUssT0FBT2tMLGVBQWVoRSxFQUFTLElBQWUsT0FBWDRELEVBQW1CLE1BQU92SSxPQUFvQmlJLEdBQUtNLEVBQVFMLEVBQU14RCxFQUFVeUQsRUFBTUUsRUFBVUQsR0FBUyxJVXB2QjdjVCxVQUFTLFNBQUFpQixHQUNULFFBREFqQixLVjh2QlQ5SyxnQkFBZ0JtQyxLVTl2QlAySSxHQUVUSyxLQUFBdkssT0FBQWtMLGVBRlNoQixFQUFTbkssV0FBQSxjQUFBd0IsTUFBQTZGLEtBQUE3RixLQUVaLFFBQ0pnSyxRQUNFbkosS0FBTSxTQUNOakMsTUFBTyxlQUVUdUosTUFDRXRILEtBQU0sU0FDTmpDLE9BQ0U0QyxJQUNFWCxLQUFNLFNBQ05qQyxNQUFPLE9BRVRvSSxNQUNFbkcsS0FBTSxTQUNOakMsTUFBTyxtQkFFVGlMLFNBQ0VoSixLQUFNLFNBQ05qQyxNQUFPLHVCQUlicUwsdUJBQ0VwSixLQUFNLFFBQ05qQyxPQUFRLGFBQWMsV1Ztd0I1QixNQWxDQVAsV1UzdkJXc0ssRUFBU2lCLEdBQVRqQixHQUFrQjlJIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExpYWlzb24ge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgbGV0IGRhdHVtO1xuICAgIGZvciAoZGF0dW0gaW4gZGF0YSkge1xuICAgICAgdGhpc1tkYXR1bV0gPSBkYXRhW2RhdHVtXTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRfY29tcG9uZW50KG1vZHVsZSwgZGF0YSkge1xuICBuZXcgd2luZG93W21vZHVsZV0oZGF0YSk7XG59XG4iLCIvLyBUT0RPOiBhbGxvdyBhIHNoYXJlZCBmcm9udGVuZC9iYWNrZW5kIHNjaGVtYSBmaWxlXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlTW9kZWwge1xuICBjb25zdHJ1Y3Rvcihtb2RlbE5hbWUsIHNjaGVtYSkge1xuICAgIHRoaXMubW9kZWxOYW1lID0gbW9kZWxOYW1lO1xuICAgIHRoaXMuZGF0YSA9IHNjaGVtYTtcbiAgfVxuXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgbGV0IGV4aXN0c0luU2NoZW1hID0gdGhpcy5leGlzdHNJblNjaGVtYSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpO1xuICAgIGlmICghZXhpc3RzSW5TY2hlbWEpIHtcbiAgICAgIGNvbnNvbGUud2FybihgTm90IHNldHRpbmcgXCIke2tleX1cIiBpbiAke3RoaXMubW9kZWxOYW1lfSBtb2RlbCB0byBcIiR7dmFsdWV9XCIgYmVjYXVzZSBpdCBkb2VzbnQgZXhpc3QgaW4gdGhlIHNjaGVtYWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHlwZU1hdGNoZXMgPSB0aGlzLmNoZWNrVHlwZSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpXG4gICAgaWYgKCF0eXBlTWF0Y2hlcykge1xuICAgICAgY29uc29sZS53YXJuKGBOb3Qgc2V0dGluZyBcIiR7a2V5fVwiIGluICR7dGhpcy5tb2RlbE5hbWV9IG1vZGVsIHRvIFwiJHt2YWx1ZX1cIiBiZWNhdXNlIGl0IGl0IGlzbnQgdGhlIHJpZ2h0IHR5cGVgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZ2V0KGFjY2Vzcykge1xuICAgIGlmIChhY2Nlc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHRoaXMuZGF0YSwgYWNjZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSh0aGlzLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIGV4aXN0c0luU2NoZW1hKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmV4aXN0c0luU2NoZW1hKG9ialthY2Nlc3Muc2hpZnQoKV0udmFsdWUsIGFjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqW2FjY2Vzc1swXV0gPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY2hlY2tUeXBlKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrVHlwZShvYmpbYWNjZXNzLnNoaWZ0KCldLnZhbHVlLCBhY2Nlc3MsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9ialthY2Nlc3NbMF1dLnR5cGUgPT09IHR5cGVvZiB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXREYXRhKG9iaiwgbmV3T2JqID0ge30pIHtcbiAgICBmb3IgKGxldCBlbGVtZW50IGluIG9iaikge1xuICAgICAgaWYgKG9ialtlbGVtZW50XS50eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBuZXdPYmpbZWxlbWVudF0gPSB7fTtcbiAgICAgICAgdGhpcy5nZXREYXRhKG9ialtlbGVtZW50XS52YWx1ZSwgbmV3T2JqW2VsZW1lbnRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtlbGVtZW50XSA9IG9ialtlbGVtZW50XS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfVxuXG4gIHNldFZhbHVlKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0udmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUob2JqW2FjY2Vzcy5zaGlmdCgpXS52YWx1ZSwgYWNjZXNzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChvYmpbYWNjZXNzWzBdXS52YWx1ZSkge1xuICAgICAgb2JqW2FjY2Vzc1swXV0udmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZShvYmosIGFjY2Vzcykge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKG9ialthY2Nlc3Muc2hpZnQoKV0udmFsdWUsIGFjY2Vzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmpbYWNjZXNzWzBdXS52YWx1ZSB8fCAnJztcbiAgICB9XG4gIH1cblxuICBzZXQgZW5kcG9pbnRQcmVmaXgocHJlZml4KSB7XG4gICAgdGhpcy5fZW5kcG9pbnRQcmVmaXggPSBwcmVmaXg7XG4gIH1cblxuICBnZXQgZW5kcG9pbnRQcmVmaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZHBvaW50UHJlZml4IHx8ICdhcGkvdmknO1xuICB9XG5cbiAgLy8gVE9ETzogcmVmYWN0b3IgdGhpcyB0byBoZWxwZXJcbiAgY2hlY2tTdGF0dXMocmVzcG9uc2UpIHtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICAgIHJldHVybiByZXNwb25zZVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dClcbiAgICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2VcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgcGFyc2VKU09OKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9XG5cbiAgLy8gVE9ETzogQ1JVRCBvcGVyYXRpb25zIHhociBjYWxscy4gcmV0dXJuIHByb21pc2VzXG4gIHNhdmUoaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGxldCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgbGV0IHNlbmRPYmogPSB7fTtcbiAgICBzZW5kT2JqW3RoaXMubW9kZWxOYW1lXSA9IHRoaXMuZ2V0KCk7XG4gICAgY29uc29sZS5sb2coYG1ha2UgcG9zdCB4aHIgY2FsbCB0byAke3VybH1gLCBzZW5kT2JqKTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNlbmRPYmopXG4gICAgICB9KS50aGVuKHRoaXMuY2hlY2tTdGF0dXMpXG4gICAgICAudGhlbih0aGlzLnBhcnNlSlNPTik7XG4gIH1cblxuICBmZXRjaChpZCA9IHRoaXMuZ2V0KCdpZCcpKSB7XG4gICAgbGV0IHVybCA9IGAke3RoaXMuZW5kcG9pbnRQcmVmaXh9LyR7dGhpcy5tb2RlbE5hbWV9LyR7aWR9YDtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSBnZXQgeGhyIGNhbGwgdG8gJHt1cmx9YCk7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ2dldCdcbiAgICAgIH0pLnRoZW4odGhpcy5jaGVja1N0YXR1cylcbiAgICAgIC50aGVuKHRoaXMucGFyc2VKU09OKTs7XG4gIH1cblxuICB1cGRhdGUoaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGxldCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgbGV0IHNlbmRPYmogPSB7fTtcbiAgICBzZW5kT2JqW3RoaXMubW9kZWxOYW1lXSA9IHRoaXMuZ2V0KCk7XG4gICAgY29uc29sZS5sb2coYG1ha2UgdXBkYXRlIHhociBjYWxsIHRvICR7dXJsfWAsIHNlbmRPYmopO1xuXG4gICAgLy8gR2l0aHViJ3MgZmV0Y2ggcHJvamVjdCBkb2VzbnQgYXBwZWFyIHRvIHN1cHBvcnQgVVBEQVRFXG4gICAgLy8gVE9ETzogaW52ZXN0aWdhdGUgdGhlIGFib3ZlIHN0YXRlbWVudFxuICAgIC8vIGZldGNoKHVybCwge1xuICAgIC8vICAgbWV0aG9kOiAnVVBEQVRFJyxcbiAgICAvLyAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNlbmRPYmopXG4gICAgLy8gfSk7XG4gIH1cblxuICBkZXN0cm95KGlkID0gdGhpcy5nZXQoJ2lkJykpIHtcbiAgICBsZXQgdXJsID0gYCR7dGhpcy5lbmRwb2ludFByZWZpeH0vJHt0aGlzLm1vZGVsTmFtZX0vJHtpZH1gO1xuICAgIGNvbnNvbGUubG9nKGBtYWtlIGRlbGV0ZSB4aHIgY2FsbCB0byAke3VybH1gKTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnZGVsZXRlJ1xuICAgICAgfSkudGhlbih0aGlzLmNoZWNrU3RhdHVzKVxuICAgICAgLnRoZW4odGhpcy5wYXJzZUpTT04pO1xuICB9XG59XG4iLCIvL2FsbG93aW5nIGZvci4ub2Ygb2Ygbm9kZWxpc3RzIGZvciBDaHJvbWUgc3VwcG9ydFxuTm9kZUxpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBBcnJheS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcbmltcG9ydCBIYXNoZXIgZnJvbSAnLi9IYXNoZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmRpbmcge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmZpbmRCaW5kYWJsZSgpO1xuICAgIHRoaXMuaGFzaCA9IG5ldyBIYXNoZXIoKTtcblxuICAgIGxldCBjdXJyZW50RGF0YSA9IGN1cnJlbnREYXRhIHx8IHt9O1xuXG4gICAgLy8gd2F0Y2hpbmcgdGhpcy5kYXRhIGZvciBwcm9ncmFtbWF0aWNhbCB1cGRhdGVzXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgLy8gVE9ETyBmaW5kIGEgYmV0dGVyIHdheSB0byBjb21wYXJlXG4gICAgICAvLyBpZiAodGhpcy5oYXNoLmNvbXBhcmUoY3VycmVudERhdGEsIHRoaXMuZGF0YSkgPT09IGZhbHNlKSB7XG5cbiAgICAgIGlmIChKU09OLnN0cmluZ2lmeShjdXJyZW50RGF0YSkgIT09IEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpIHtcbiAgICAgICAgY3VycmVudERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpO1xuICAgICAgICB0aGlzLnBvcHVsYXRlQmluZGluZ3MoKTtcbiAgICAgIH1cbiAgICB9LCAxMCk7XG4gIH1cblxuICBwb3B1bGF0ZUJpbmRpbmdzKCkge1xuICAgIGZvciAobGV0IGVsbSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbbGlhaXNvbi1iaW5kXScpKSB7XG4gICAgICBsZXQgYmluZE5hbWUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnbGlhaXNvbi1iaW5kJyk7XG5cbiAgICAgIC8vcHJldmVudCB0aGUgaW5wdXQgeW91cmUgdHlwaW5nIGluIGZyb20gdXBkYXRpbmcuIHByZXZlbnRzIHRoZSBjdXJzb3IgZnJvbSBqdW1waW5nIHRvIHRoZSBlbmRcbiAgICAgIC8vb25seSB1cGRhdGVzIGJpbmRpbmdzIHRoYXQgbmVlZCB0byBiZSB1cGRhdGVkXG4gICAgICBpZiAoZWxtICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIChlbG0uZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKSA9PT0gYmluZE5hbWUgfHwgYmluZE5hbWUgPT09IG51bGwpKSB7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoZWxtLCB0aGlzLmdldFZhbHVlKHRoaXMuZGF0YSwgZWxtLmdldEF0dHJpYnV0ZSgnbGlhaXNvbi1iaW5kJykpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmaW5kQmluZGFibGUoKSB7XG4gICAgZm9yIChsZXQgZWxtIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsaWFpc29uLWJpbmRdJykpIHtcbiAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgICAgICAgLy9zZXR0aW1lb3V0IGFsbG93cyB0aGUga2V5ZG93biBldmVudCBnbyBnZXQgdGhlIG5ldyB2YWx1ZVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0VmFsdWUodGhpcy5kYXRhLCBlbG0uZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKSwgZS5zcmNFbGVtZW50LnZhbHVlKSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNldEVsZW1lbnRDb250ZW50KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgLy8gYWxsb3dzIG11bHRpcGxlIGNvbXBvbmVudHNcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgc2V0VmFsdWUob2JqLCBhY2Nlc3MsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZihhY2Nlc3MpID09ICdzdHJpbmcnKSB7XG4gICAgICBhY2Nlc3MgPSBhY2Nlc3Muc3BsaXQoJy4nKTtcbiAgICB9XG4gICAgaWYgKGFjY2Vzcy5sZW5ndGggPiAxICYmIG9ialthY2Nlc3NbMF1dKSB7XG4gICAgICB0aGlzLnNldFZhbHVlKG9ialthY2Nlc3Muc2hpZnQoKV0sIGFjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialthY2Nlc3NbMF1dID09PSAnc3RyaW5nJykge1xuICAgICAgb2JqW2FjY2Vzc1swXV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZShvYmosIGFjY2Vzcykge1xuICAgIGlmICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykge1xuICAgICAgYWNjZXNzID0gYWNjZXNzLnNwbGl0KCcuJyk7XG4gICAgfVxuICAgIGlmIChhY2Nlc3MubGVuZ3RoID4gMSAmJiBvYmpbYWNjZXNzWzBdXSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUob2JqW2FjY2Vzcy5zaGlmdCgpXSwgYWNjZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9ialthY2Nlc3NbMF1dO1xuICAgIH1cbiAgfVxuXG4gIHJlZnJlc2goZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5wb3B1bGF0ZUJpbmRpbmdzKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhc2hlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBoYXNoKHZhbCkge1xuICAgIGxldCBoYXNoID0gMCxcbiAgICAgIGksXG4gICAgICBsLFxuICAgICAgc3RyaW5nID0gdmFsLnRvU3RyaW5nKCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGhhc2ggPSAoKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBzdHJpbmcuY2hhckNvZGVBdChpKSkgJiAweEZGRkZGRkZGO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIG9iamVjdChzZWxmLCBvYmopIHtcbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BlcnR5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0KHNlbGYsIG9ialtwcm9wZXJ0eV0pXG4gICAgICB9XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3BlcnR5KSkge1xuICAgICAgICByZXN1bHQgKz0gc2VsZi5oYXNoKHByb3BlcnR5ICsgc2VsZi5oYXNoKG9ialtwcm9wZXJ0eV0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhbHVlKGlucHV0KSB7XG4gICAgbGV0IHR5cGVzID0ge1xuICAgICAgJ3N0cmluZyc6IHRoaXMuaGFzaCxcbiAgICAgICdudW1iZXInOiB0aGlzLmhhc2gsXG4gICAgICAnYm9vbGVhbic6IHRoaXMuaGFzaCxcbiAgICAgICdvYmplY3QnOiB0aGlzLm9iamVjdFxuICAgIH07XG4gICAgbGV0IHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG5cbiAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiB0eXBlc1t0eXBlXSA/IHR5cGVzW3R5cGVdKHRoaXMsIGlucHV0KSArIHRoaXMuaGFzaCh0eXBlKSA6IDA7XG4gIH1cblxuICBjb21wYXJlKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZShhKSA9PT0gdGhpcy52YWx1ZShiKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2xpYWlzb24tdmlld10nKTtcbiAgICB0aGlzLnBhdGhzID0gW107XG4gICAgdGhpcy53aWxkY2FyZHMgPSBbXTtcbiAgICAvL2dvZXMgdG8gaGFzaCB1cmxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZ28od2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpKSwgMCk7XG4gICAgLy9hbGxvd3MgYmFjay9mb3J3YXJkIGJ1dHRvbnNcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoZXZlbnQpID0+IHRoaXMuZ28oZXZlbnQuc3RhdGUgfHwgd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLCBmYWxzZSkpO1xuICB9XG5cbiAgc3RhdGUoZGF0YSkge1xuICAgIGlmIChkYXRhLm5hbWUuaW5kZXhPZignOicpID4gMCkge1xuICAgICAgdGhpcy53aWxkY2FyZHMucHVzaChkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXRocy5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZhbGxiYWNrKGRhdGEpIHtcbiAgICB0aGlzLnBhdGhzLnB1c2goZGF0YSk7XG4gICAgdGhpcy5fZmFsbGJhY2sgPSBkYXRhO1xuICB9XG5cbiAgLy8gaW50ZWdyYXRpb24gdGVzdHMgY292ZXIgdGhpc1xuICBnbyhyb3V0ZSkge1xuICAgIGNvbnNvbGUubG9nKGBnb2luZyB0byBzdGF0ZSAke3JvdXRlfWApO1xuICAgIGxldCBvYmogPSB0aGlzLmZpbmRSb3V0ZUluUGF0aHMocm91dGUpO1xuICAgIGlmICghb2JqKSB7XG4gICAgICB0aGlzLmdvKHRoaXMuX2ZhbGxiYWNrLm5hbWUpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZldGNoKG9iai50ZW1wbGF0ZVVybClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgfSkudGhlbigodGVtcGxhdGUpID0+IHtcbiAgICAgICAgdGhpcy52aWV3LmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgICAgfSk7XG4gIH1cblxuICAvLyBUT0RPOiBjbGVhbiB0aGlzIHVwLiB0aGVyZSBoYXMgdG8gYmUgYSBiZXR0ZXIgd2F5XG4gIC8vIFRPRE86IHdyaXRlIHVuaXQgdGVzdCBmb3IgdGhpcy4gaW50ZWdyYXRpb24gdGVzdCBpcyBnb29kIGJ1dCB0aGlzIGNhbiBiZSB1bml0IHRlc3RlZCB3aGljaCB5aWVsZHMgbW9yZSBjb25zaXN0ZW50IHJlc3VsdHNcbiAgZmluZFJvdXRlSW5QYXRocyhyb3V0ZSkge1xuICAgIGZvciAobGV0IHBhdGggb2YgdGhpcy5wYXRocykge1xuICAgICAgaWYgKHBhdGgubmFtZSA9PT0gcm91dGUpIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygnbm90IGZvdW5kIG5hdHVyYWwgcGF0aC4gc2VhcmNoaW5nIHdpbGRjYXJkcycpO1xuXG4gICAgcm91dGUgPSByb3V0ZS5zdWJzdHJpbmcoMSkuc3BsaXQoJy8nKTtcbiAgICBmb3IgKGxldCB3aWxkY2FyZCBvZiB0aGlzLndpbGRjYXJkcykge1xuICAgICAgbGV0IF93aWxkY2FyZCA9IHdpbGRjYXJkLm5hbWUuc3Vic3RyaW5nKDEpLnNwbGl0KCcvJyk7XG4gICAgICBpZiAoX3dpbGRjYXJkLmxlbmd0aCA9PT0gcm91dGUubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gX3dpbGRjYXJkLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmIChfd2lsZGNhcmRbaV0uaW5kZXhPZignOicpID09PSAwKSB7XG4gICAgICAgICAgICBsZXQgdGVtcCA9IF93aWxkY2FyZDtcbiAgICAgICAgICAgIHRlbXBbaV0gPSByb3V0ZVtpXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSWRlbnRpY2FsKHRlbXAsIHJvdXRlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gd2lsZGNhcmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coJ2dvaW5nIHRvIGZhbGxiYWNrJylcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUT0RPOiBwdXQgdGhpcyBpbiBhIGhlbHBlciBsaWJyYXJ5XG4gIC8vIHRoaXMgZnVuY3Rpb24gd2FzIGZvdW5kIGF0IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzgzNzQ1Ni9jb21wYXJpbmctdHdvLWFycmF5cy1pbi1qYXZhc2NyaXB0XG4gIC8vIHRoaXMgaXMgYSBzaGFsbG93IGNoZWNrXG4gIGlzSWRlbnRpY2FsKGEsIGIpIHtcbiAgICB2YXIgaSA9IGEubGVuZ3RoO1xuICAgIGlmIChpICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuXG5cbi8vICogb24gcGFnZSBsb2FkLCBnZXQgdXJsIGFuZCBsb2FkIGFwcHJvcHJpYXRlIHRlbXRwbGF0ZVxuLy8gKiBvbiB1cmwgY2hhbmdlLCB1cGRhdGUgdGVtcGxhdGVcbi8vICogYWxsb3cgd2lsZGNhcmRzIGluIHBhdGhzIC90ZW1wbGF0ZS91c2VyLzppZFxuLy8gcGFzcyB2YXJpYWJsZXMgdG8gdGVtcGxhdGVcbi8vICogZ2V0IHN0YXRlIChpZiBzdGF0ZSA9PSAnaHVob2hvaGFvJykuLi5cbi8vICogdXBkYXRlIHN0YXRlIG9uIGZvcndhcmQvYmFja1xuLy8gKiByb3V0ZXMgb24gcmVmcmVzaFxuIiwiaW1wb3J0IExpYWlzb24gZnJvbSAnLi9MaWFpc29uJ1xuaW1wb3J0IEJpbmRpbmcgZnJvbSAnLi9CaW5kaW5nJ1xuaW1wb3J0IFVzZXJNb2RlbCBmcm9tICcuL1VzZXJNb2RlbCdcbmltcG9ydCBWaWV3TW9kZWwgZnJvbSAnLi9WaWV3TW9kZWwnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4YW1wbGUge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5iaW5kID0gbmV3IExpYWlzb24oZGF0YSk7XG4gICAgY29uc29sZS5sb2codGhpcy5iaW5kKTtcbiAgICB0aGlzLmJpbmRpbmcgPSBuZXcgQmluZGluZyh0aGlzLmJpbmQpO1xuICAgIHRoaXMuZXhhbXBsZUJpbmRpbmcoKTtcbiAgICB0aGlzLmV4YW1wbGVSb3V0ZXIoKTtcbiAgfVxuXG4gIGV4YW1wbGVCaW5kaW5nKCkge1xuICAgIC8vIGhlcmUgeW91IGhhdmUgYWNjZXNzIHRvIHRoaXMuYmluZC51c2VyIGFuZCB0aGlzLmJpbmQucHJvZ3JhbW1pbmdfbGFuZ3VhZ2VzXG4gICAgLy8gY29uc29sZS5sb2codGhpcy5iaW5kLnVzZXIpO1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuYmluZC5wcm9ncmFtbWluZ19sYW5ndWFnZXMpO1xuXG4gICAgLy9tb2RlbCBleGFtcGxlc1xuICAgIGxldCB1c2VyID0gbmV3IFVzZXJNb2RlbCgpO1xuICAgIHVzZXIuc2V0KCdhZ2UnLCAnODc3NycpOyAvLyBzaG91bGQgZmFpbFxuICAgIHVzZXIuc2V0KCduYW1lJywgJ215IGZpcnN0IG5hbWUgb24gdXNlciBtb2RlbCcpOyAvL3Nob3VsZCBwYXNzXG4gICAgdXNlci5zZXQoJ2FnZScsIHtcbiAgICAgIGFnZTogMzNcbiAgICB9KTsgLy8gc2hvdWxkIGZhaWxcbiAgICB1c2VyLnNldCgnYWdlJywgOTk5KTsgLy9zaG91bGQgcGFzc1xuICAgIHVzZXIuc2V0KCdhZGRyZXNzJywgJ215IGFkZHJlc3MnKTsgLy9zaG91bGQgcGFzc1xuXG4gICAgLy9zZXRzIGRhdGEgYmluZGluZ1xuICAgIC8vIHRoaXMuYmluZC51c2VyLm5hbWUgPSB1c2VyLmdldCgnbmFtZScpXG4gICAgdXNlci5zZXQoJ2FkZHJlc3MnLCB1c2VyLnVwQ2FzZSgnbXkgc2Vjb25kIGFkZHJlc3MnKSk7IC8vc2hvdWxkIHBhc3MgYW5kIHBvc3RmaXggXCIhXCIgdG8gdGhlIGFkZHJlc3NcblxuICAgIHVzZXIuc2F2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygndGhlbicpXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0IGZhaWxlZCcsIGVycm9yKVxuICAgIH0pO1xuICAgIHVzZXIudXBkYXRlKCk7XG4gICAgdXNlci5mZXRjaCgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygndGhlbicpXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0IGZhaWxlZCcsIGVycm9yKVxuICAgIH0pO1xuICAgIHVzZXIuZGVzdHJveSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZygndGhlbicpXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0IGZhaWxlZCcsIGVycm9yKVxuICAgIH0pO1xuXG4gICAgLy8gc2Vjb25kIG1vZGVsXG4gICAgbGV0IHZpZXdtb2RlbCA9IG5ldyBWaWV3TW9kZWwoKTtcbiAgICB2aWV3bW9kZWwuc2V0KCdzaW5nbGUnLCAndXBkYXRlZCB2aWEgdmlld21vZGVsIG1vZGVsIHNldCBmdW5jdGlvbicpOyAvLyBzaG91bGQgcGFzc1xuICAgIHZpZXdtb2RlbC5zZXQoJ3VzZXIubmFtZScsICdteSBzZWNvbmQgZXhhbXBsZSBuYW1lJyk7IC8vc2hvdWxkIHBhc3NcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFnZScsIHtcbiAgICAgICAgYWdlOiAyMlxuICAgICAgfSkgLy8gc2hvdWxkIGZhaWxcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFnZScsIDQ0NCk7IC8vc2hvdWxkIGZhaWxcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFkZHJlc3MnLCA3Nzg3OCk7IC8vc2hvdWxkIGZhaWxcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFkZHJlc3MnLCAnbXkgc2Vjb25kIGFkZHJlc3MnKTsgLy9zaG91bGQgcGFzc1xuXG4gICAgLy9zZXRzIGRhdGEgYmluZGluZ1xuICAgIC8vIHRoaXMuYmluZCA9IHZpZXdtb2RlbC5nZXQoKVxuICAgIC8vIHRoaXMuYmluZC51c2VyID0gdXNlci5nZXQoKVxuICAgIHRoaXMuYmluZGluZy5yZWZyZXNoKHRoaXMuYmluZCk7XG4gIH1cblxuICBleGFtcGxlUm91dGVyKCkge1xuICAgIC8vIGNoYW5nZSBzdGF0ZSB0byAvbGlzdFxuICAgIC8vIHJvdXRlci5nbygnaG9kb3IvMTInLCB7bXlkYXRhOjEyMzQ1NTYsIG15b2JqOntuYW1lOidzaGVybG9jayd9fSk7XG4gICAgLy8gc2V0VGltZW91dCgoKT0+IHdpbmRvdy5yb3V0ZXIuZ28oJ2xpc3QnKSwyMDAwKVxuICB9XG59XG4iLCJpbXBvcnQgTGlhaXNvbiBmcm9tICcuL0xpYWlzb24nXG5pbXBvcnQgQmluZGluZyBmcm9tICcuL0JpbmRpbmcnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4YW1wbGUyIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuYmluZCA9IG5ldyBMaWFpc29uKGRhdGEpO1xuICAgIG5ldyBCaW5kaW5nKHRoaXMuYmluZCk7XG4gICAgICAvLyB0aGlzLmFub3RoZXJGdW5jdGlvbigpXG4gIH1cblxuICBhbm90aGVyRnVuY3Rpb24oKSB7XG4gICAgLy8gaGVyZSB5b3UgaGF2ZSBhY2Nlc3MgdG8gdGhpcy5kYXRhLnVzZXIgYW5kIHRoaXMuZGF0YS5wcm9ncmFtbWluZ19sYW5ndWFnZXNcbiAgICBjb25zb2xlLmxvZyh0aGlzLmJpbmQuc3RyaW5nKTtcbiAgfVxufVxuIiwiLy8gcHV0cyByb3V0ZXMgb24gdGhlIHJvdXRlciBjbGFzc1xuXG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcbi8vIFRPRE86IG5vdCBhdHRhY2ggdGhpcyB0byB0aGUgZ2xvYmFsIG5hbWVzcGFjZVxud2luZG93LnJvdXRlciA9IHdpbmRvdy5yb3V0ZXIgfHwgbmV3IFJvdXRlcigpO1xucm91dGVyLnN0YXRlKHtcbiAgbmFtZTogJy91c2VycycsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJpbmRleC5odG1sJ1xufSkuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXIvOmlkJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdXNlci5odG1sJ1xufSkuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXIvOmlkL2RldGFpbHMnLFxuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy91c2VyZGV0YWlscy5odG1sJ1xufSkuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXIvOmlkLzpzdWJpZCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJzdWIuaHRtbCdcbn0pLnN0YXRlKHtcbiAgbmFtZTogJy9saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvbGlzdC5odG1sJ1xufSkuc3RhdGUoe1xuICBuYW1lOiAnLycsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL2xpc3QuaHRtbCdcbn0pLmZhbGxiYWNrKHtcbiAgbmFtZTogJy80MDQnLFxuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy80MDQuaHRtbCdcbn0pO1xuIiwiaW1wb3J0IEJhc2VNb2RlbCBmcm9tICcuL0Jhc2VNb2RlbCdcblxuZXhwb3J0IGNsYXNzIFVzZXJNb2RlbCBleHRlbmRzIEJhc2VNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCd1c2VyJywge1xuICAgICAgaWQ6IHtcbiAgICAgICAgdmFsdWU6IDc4OTc4NyxcbiAgICAgICAgdHlwZTogJ251bWJlcidcbiAgICAgIH0sXG4gICAgICBuYW1lOiB7XG4gICAgICAgIHZhbHVlOiAnbmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAgYWRkcmVzczoge1xuICAgICAgICB2YWx1ZTogJzIyMWIgYmFrZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgICB9LFxuICAgICAgYWdlOiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy9leGFtcGxlIG1vZGVsIGhlbHBlclxuICB1cENhc2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgQmFzZU1vZGVsIGZyb20gJy4vQmFzZU1vZGVsJ1xuXG5leHBvcnQgY2xhc3MgVmlld01vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3ZpZXcnLCB7XG4gICAgICBzaW5nbGU6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIHZhbHVlOiAnZnJvbSBzY2hlbWEnXG4gICAgICB9LFxuICAgICAgdXNlcjoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICBpZDoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICB2YWx1ZTogODg4ODhcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgdmFsdWU6ICdTaGVybG9jayBIb2xtZXMnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIHZhbHVlOiAnMjIxYiBCYWtlciBTdHJlZXQnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHByb2dyYW1taW5nX2xhbmd1YWdlczoge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICB2YWx1ZTogWydqYXZhc2NyaXB0JywgJ3J1YnknXVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
