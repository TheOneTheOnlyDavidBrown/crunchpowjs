<<<<<<< Updated upstream
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function loadComponent(e,t){return new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this._existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". Doesnt exist in the schema');var r=this._checkType(this.data,e,t);return r?void this._setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". It isnt the right type')}},{key:"get",value:function(e){var t=void 0;return t=e?this._getValue(this.data,e):this._getData(this.data)}},{key:"_existsInSchema",value:function(e,t,n){var r=void 0,a="string"==typeof t?t.split("."):t;return r=a.length>1&&e[a[0]]?this._existsInSchema(e[a.shift()].value,a,n):e[a[0]]?!0:!1}},{key:"_checkType",value:function(e,t,n){var r=void 0,a="string"==typeof t?t.split("."):t;return r=a.length>1&&e[a[0]]?this._checkType(e[a.shift()].value,a,n):e[a[0]].type===typeof n}},{key:"_getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this._getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"_setValue",value:function(e,t,n){var r="string"==typeof t?t.split("."):t;r.length>1&&e[r[0]].value?this._setValue(e[r.shift()].value,r,n):e[r[0]].value&&(e[r[0]].value=n)}},{key:"_getValue",value:function(e,t){var n=void 0,r=t;return r="string"==typeof t?r.split("."):r,n=r.length>1&&e[r[0]]?this._getValue(e[r.shift()].value,r):e[r[0]].value||""}},{key:"_checkStatus",value:function(e){var t=void 0;if(!(e.status>=200&&e.status<300)){var n=new Error(e.statusText);throw n.response=e,n}return t=e}},{key:"_parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={},r={method:"post",body:JSON.stringify(n)};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,r).then(this._checkStatus).then(this._parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"get"};return console.log("make get xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"delete"};return console.log("make delete xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this._findBindable(),this.utils=new Utils;var r=r||{};setInterval(function(){n.utils.compare(r,n.data)===!1&&(r=JSON.parse(JSON.stringify(n.data)),n._populateBindings())},10)}return _createClass(e,[{key:"_populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,a=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(r=a.next()).done);e=!0){var i=r.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this._setElementContent(i,this._getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&a["return"]&&a["return"]()}finally{if(t)throw n}}}},{key:"_findBindable",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var a,i=function(){var t=a.value;t.addEventListener("keydown",function(n){setTimeout(function(){return e._setValue(e.data,t.getAttribute("liaison-bind"),n.srcElement.value)})})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(a=o.next()).done);t=!0)i()}catch(s){n=!0,r=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}}},{key:"_setElementContent",value:function(e,t){void 0!==t&&(e.innerHTML=t,e.value=t)}},{key:"_setValue",value:function(e,t,n){var r=t;"string"==typeof r&&(r=r.split(".")),r.length>1&&e[r[0]]?this._setValue(e[r.shift()],r,n):"string"==typeof e[r[0]]&&(e[r[0]]=n)}},{key:"_getValue",value:function(e,t){var n=t,r=void 0;return"string"==typeof n&&(n=n.split(".")),r=n.length>1&&e[n[0]]?this._getValue(e[n.shift()],n):e[n[0]]}},{key:"refresh",value:function(e){this.data=e,this._populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);for(var n in t)n&&(this[n]=t[n])},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.utils=new Utils,this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this._findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"_findRouteInPaths",value:function(e){var t=this,n=!0,r=!1,a=void 0;try{for(var i,o=this.paths[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var s=i.value;if(s.name===e)return s}}catch(l){r=!0,a=l}finally{try{!n&&o["return"]&&o["return"]()}finally{if(r)throw a}}var u=void 0,c=this._parseRoute(e);return this.wildcards.filter(function(e){return t._parseRoute(e.name).length===c.length}).forEach(function(e){var n=t._parseRoute(e.name);n.forEach(function(r,a){if(0!==r.indexOf(":"))return!1;var i=n;i[a]=c[a],t.utils.compare(i,c)&&(u=e)})}),u}},{key:"_parseRoute",value:function(e){return e.substring(1).split("/")}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Utils=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_hasher",value:function(e){var t=0,n=void 0,r=void 0,a=e.toString();for(n=0,r=a.length;r>n;n++)t=(t<<5)-t+a.charCodeAt(n)&4294967295;return t}},{key:"_object",value:function(e,t){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=n;for(var a in t){if("object"==typeof t[a])return this._object(e,t[a],r);hasOwnProperty.call(t,a)&&(r+=e._hasher(a+e._hasher(t[a])))}return r}},{key:"hash",value:function(e){var t={string:this._hasher,number:this._hasher,"boolean":this._hasher,object:this.object},n=typeof e;return null!==e&&t[n]?t[n](this,e)+this._hasher(n):0}},{key:"compareHashes",value:function(e,t){return this.hash(e)===this.hash(t)}},{key:"compare",value:function(e,t){return JSON.stringify(e)===JSON.stringify(t)}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),this.binding=new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,window.router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programmingLanguages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel),allcaps=function(e){return e.toUpperCase()},currency=function(e){return console.log("hhh"),"$"+e.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")};
//# sourceMappingURL=data:application/json;base64,
=======
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function loadComponent(e,t){return new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this._existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". Doesnt exist in the schema');var r=this._checkType(this.data,e,t);return r?void this._setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". It isnt the right type')}},{key:"get",value:function(e){var t=void 0;return t=e?this._getValue(this.data,e):this._getData(this.data)}},{key:"_existsInSchema",value:function(e,t,n){var r=void 0,a="string"==typeof t?t.split("."):t;return r=a.length>1&&e[a[0]]?this._existsInSchema(e[a.shift()].value,a,n):e[a[0]]?!0:!1}},{key:"_checkType",value:function(e,t,n){var r=void 0,a="string"==typeof t?t.split("."):t;return r=a.length>1&&e[a[0]]?this._checkType(e[a.shift()].value,a,n):e[a[0]].type===typeof n}},{key:"_getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this._getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"_setValue",value:function(e,t,n){var r="string"==typeof t?t.split("."):t;r.length>1&&e[r[0]].value?this._setValue(e[r.shift()].value,r,n):e[r[0]].value&&(e[r[0]].value=n)}},{key:"_getValue",value:function(e,t){var n=void 0,r=t;return r="string"==typeof t?r.split("."):r,n=r.length>1&&e[r[0]]?this._getValue(e[r.shift()].value,r):e[r[0]].value||""}},{key:"_checkStatus",value:function(e){var t=void 0;if(!(e.status>=200&&e.status<300)){var n=new Error(e.statusText);throw n.response=e,n}return t=e}},{key:"_parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={},r={method:"post",body:JSON.stringify(n)};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,r).then(this._checkStatus).then(this._parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"get"};return console.log("make get xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"delete"};return console.log("make delete xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this._findBindable(),this.utils=new Utils;var r=r||{};setInterval(function(){n.utils.compare(r,n.data)===!1&&(r=JSON.parse(JSON.stringify(n.data)),n._populateBindings())},10)}return _createClass(e,[{key:"_populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,a=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(r=a.next()).done);e=!0){var i=r.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this._setElementContent(i,this._getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&a["return"]&&a["return"]()}finally{if(t)throw n}}}},{key:"_findBindable",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var a,i=function(){var t=a.value;t.addEventListener("keydown",function(n){setTimeout(function(){return e._setValue(e.data,t.getAttribute("liaison-bind"),n.srcElement.value)})})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(a=o.next()).done);t=!0)i()}catch(s){n=!0,r=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}}},{key:"_setElementContent",value:function(e,t){void 0!==t&&(e.innerHTML=t,e.value=t)}},{key:"_setValue",value:function(e,t,n){var r=t;"string"==typeof r&&(r=r.split(".")),r.length>1&&e[r[0]]?this._setValue(e[r.shift()],r,n):"string"==typeof e[r[0]]&&(e[r[0]]=n)}},{key:"_getValue",value:function(e,t){var n=t,r=void 0;return"string"==typeof n&&(n=n.split(".")),r=n.length>1&&e[n[0]]?this._getValue(e[n.shift()],n):e[n[0]]}},{key:"refresh",value:function(e){this.data=e,this._populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);for(var n in t)n&&(this[n]=t[n])},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.utils=new Utils,this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this._findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"_findRouteInPaths",value:function(e){var t=!0,n=!1,r=void 0;try{for(var a,i=this.paths[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var o=a.value;if(o.name===e)return o}}catch(s){n=!0,r=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}var l=e.substring(1).split("/"),u=!0,c=!1,h=void 0;try{for(var f,d=this.wildcards[Symbol.iterator]();!(u=(f=d.next()).done);u=!0){var v=f.value,p=v.name.substring(1).split("/");if(p.length===l.length)for(var g=0,y=p.length;y>g;g++)if(0===p[g].indexOf(":")){var m=p;if(m[g]=l[g],this.utils.compare(m,l))return v}}}catch(s){c=!0,h=s}finally{try{!u&&d["return"]&&d["return"]()}finally{if(c)throw h}}return!1}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Utils=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_hasher",value:function(e){var t=0,n=void 0,r=void 0,a=e.toString();for(n=0,r=a.length;r>n;n++)t=(t<<5)-t+a.charCodeAt(n)&4294967295;return t}},{key:"_object",value:function(e,t){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],r=n;for(var a in t){if("object"==typeof t[a])return this._object(e,t[a],r);hasOwnProperty.call(t,a)&&(r+=e._hasher(a+e._hasher(t[a])))}return r}},{key:"hash",value:function(e){var t={string:this._hasher,number:this._hasher,"boolean":this._hasher,object:this.object},n=typeof e;return null!==e&&t[n]?t[n](this,e)+this._hasher(n):0}},{key:"compareHashes",value:function(e,t){return this.hash(e)===this.hash(t)}},{key:"compare",value:function(e,t){return JSON.stringify(e)===JSON.stringify(t)}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),this.binding=new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,window.router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programmingLanguages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel),currency=function(e){return console.log("hhh"),"$"+e.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJMaWFpc29uLmpzIiwiQmFzZU1vZGVsLmpzIiwiQmluZGluZy5qcyIsIlJvdXRlci5qcyIsIlV0aWxzLmpzIiwic2NyaXB0cy9FeGFtcGxlLmpzIiwic2NyaXB0cy9FeGFtcGxlMi5qcyIsInNjcmlwdHMvUm91dGVzLmpzIiwic2NyaXB0cy9Vc2VyTW9kZWwuanMiLCJzY3JpcHRzL1ZpZXdNb2RlbC5qcyIsInNjcmlwdHMvY3VycmVuY3kuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImxvYWRDb21wb25lbnQiLCJtb2R1bGUiLCJkYXRhIiwid2luZG93IiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkJhc2VNb2RlbCIsIm1vZGVsTmFtZSIsInNjaGVtYSIsInRoaXMiLCJleGlzdHNJblNjaGVtYSIsIl9leGlzdHNJblNjaGVtYSIsImNvbnNvbGUiLCJ3YXJuIiwidHlwZU1hdGNoZXMiLCJfY2hlY2tUeXBlIiwiX3NldFZhbHVlIiwiYWNjZXNzIiwicmV0dXJuVmFsdWUiLCJ1bmRlZmluZWQiLCJfZ2V0VmFsdWUiLCJfZ2V0RGF0YSIsIm9iaiIsIl9hY2Nlc3MiLCJzcGxpdCIsInNoaWZ0IiwidHlwZSIsIm5ld09iaiIsImFyZ3VtZW50cyIsImVsZW1lbnQiLCJyZXNwb25zZSIsInN0YXR1cyIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwianNvbiIsImlkIiwiZ2V0IiwidXJsIiwiZW5kcG9pbnRQcmVmaXgiLCJzZW5kT2JqIiwieGhyUHJvcGVydGllcyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibG9nIiwiZmV0Y2giLCJ0aGVuIiwiX2NoZWNrU3RhdHVzIiwiX3BhcnNlSlNPTiIsIl9mZXRjaCIsImFwcGx5IiwidG9TdHJpbmciLCJzZXQiLCJwcmVmaXgiLCJfZW5kcG9pbnRQcmVmaXgiLCJOb2RlTGlzdCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJCaW5kaW5nIiwiX3RoaXMiLCJfZmluZEJpbmRhYmxlIiwidXRpbHMiLCJVdGlscyIsImN1cnJlbnREYXRhIiwic2V0SW50ZXJ2YWwiLCJjb21wYXJlIiwicGFyc2UiLCJfcG9wdWxhdGVCaW5kaW5ncyIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJuZXh0IiwiZG9uZSIsImVsbSIsImJpbmROYW1lIiwiYWN0aXZlRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsIl9zZXRFbGVtZW50Q29udGVudCIsImVyciIsIl90aGlzMiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2xvb3AiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzZXRUaW1lb3V0Iiwic3JjRWxlbWVudCIsIl9pdGVyYXRvcjIiLCJpbm5lckhUTUwiLCJMaWFpc29uIiwiZGF0dW0iLCJSb3V0ZXIiLCJ2aWV3IiwicXVlcnlTZWxlY3RvciIsInBhdGhzIiwid2lsZGNhcmRzIiwiZ28iLCJsb2NhdGlvbiIsImhhc2giLCJzdWJzdHJpbmciLCJzdGF0ZSIsIm5hbWUiLCJpbmRleE9mIiwicHVzaCIsIl9mYWxsYmFjayIsInJvdXRlIiwiX2ZpbmRSb3V0ZUluUGF0aHMiLCJ0ZW1wbGF0ZVVybCIsInRleHQiLCJ0ZW1wbGF0ZSIsInBhdGgiLCJfcm91dGUiLCJ3aWxkY2FyZCIsIl93aWxkY2FyZCIsImluZGV4IiwibGVuIiwidGVtcCIsInZhbCIsInN0cmluZyIsImNoYXJDb2RlQXQiLCJzZWxmIiwicmVzdWx0IiwiX3Jlc3VsdCIsInByb3BlcnR5IiwiX29iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9oYXNoZXIiLCJpbnB1dCIsInR5cGVzIiwibnVtYmVyIiwiYm9vbGVhbiIsIm9iamVjdCIsIml0ZW1BIiwiaXRlbUIiLCJFeGFtcGxlIiwiYmluZCIsImJpbmRpbmciLCJleGFtcGxlQmluZGluZyIsImV4YW1wbGVSb3V0ZXIiLCJ1c2VyIiwiVXNlck1vZGVsIiwiYWdlIiwidXBDYXNlIiwic2F2ZSIsInVwZGF0ZSIsImRlc3Ryb3kiLCJ2aWV3bW9kZWwiLCJWaWV3TW9kZWwiLCJyZWZyZXNoIiwiRXhhbXBsZTIiLCJyb3V0ZXIiLCJmYWxsYmFjayIsIl9nZXQiLCJfeCIsIl94MiIsIl94MyIsIl9hZ2FpbiIsInJlY2VpdmVyIiwiZGVzYyIsInBhcmVudCIsImdldHRlciIsIkZ1bmN0aW9uIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJfQmFzZU1vZGVsIiwiYWRkcmVzcyIsInN0ciIsInRvVXBwZXJDYXNlIiwic2luZ2xlIiwicHJvZ3JhbW1pbmdMYW5ndWFnZXMiLCJjdXJyZW5jeSIsInRvRml4ZWQiLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiQUFDQSxZQUlBLFNBQVNBLGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQStNaEgsUUFBU0gsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBa0poSCxRQUFTSCxpQkFBZ0JDLEVB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RVRnSyxNQUNFM0gsS0FBTSxTQUNOckMsT0FDRStDLElBQ0VWLEtBQU0sU0FDTnJDLE1BQU8sT0FFVHlILE1BQ0VwRixLQUFNLFNBQ05yQyxNQUFPLG1CQUVUMEwsU0FDRXJKLEtBQU0sU0FDTnJDLE1BQU8sdUJBSWI4TCxzQkFDRXpKLEtBQU0sUUFDTnJDLE9BQVEsYUFBYyxXVm14QjVCLE1BbENBUCxXVTN3QlcrSyxFQUFTaUIsR0FBVGpCLEdBQWtCdkosV0NGekI4SyxTQUFXLFNBQUMzQyxHQUVoQixNQURBN0gsU0FBUWtDLElBQUksT0FDTCxJQUFNMkYsRUFBTTRDLFFBQVEsR0FBR0MsUUFBUSxzQkFBdUIiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlhaXNvbiB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBmb3IgKGNvbnN0IGRhdHVtIGluIGRhdGEpIHtcbiAgICAgIGlmIChkYXR1bSkge1xuICAgICAgICB0aGlzW2RhdHVtXSA9IGRhdGFbZGF0dW1dO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZENvbXBvbmVudChtb2R1bGUsIGRhdGEpIHtcbiAgcmV0dXJuIG5ldyB3aW5kb3dbbW9kdWxlXShkYXRhKTtcbn1cbiIsIi8vIFRPRE86IGFsbG93IGEgc2hhcmVkIGZyb250ZW5kL2JhY2tlbmQgc2NoZW1hIGZpbGVcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKG1vZGVsTmFtZSwgc2NoZW1hKSB7XG4gICAgdGhpcy5tb2RlbE5hbWUgPSBtb2RlbE5hbWU7XG4gICAgdGhpcy5kYXRhID0gc2NoZW1hO1xuICB9XG5cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBleGlzdHNJblNjaGVtYSA9IHRoaXMuX2V4aXN0c0luU2NoZW1hKHRoaXMuZGF0YSwga2V5LCB2YWx1ZSk7XG4gICAgaWYgKCFleGlzdHNJblNjaGVtYSkge1xuICAgICAgY29uc29sZS53YXJuKGBOb3Qgc2V0dGluZyBcIiR7a2V5fVwiIGluICR7dGhpcy5tb2RlbE5hbWV9IG1vZGVsIHRvIFwiJHt2YWx1ZX1cIi4gRG9lc250IGV4aXN0IGluIHRoZSBzY2hlbWFgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHlwZU1hdGNoZXMgPSB0aGlzLl9jaGVja1R5cGUodGhpcy5kYXRhLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoIXR5cGVNYXRjaGVzKSB7XG4gICAgICBjb25zb2xlLndhcm4oYE5vdCBzZXR0aW5nIFwiJHtrZXl9XCIgaW4gJHt0aGlzLm1vZGVsTmFtZX0gbW9kZWwgdG8gXCIke3ZhbHVlfVwiLiBJdCBpc250IHRoZSByaWdodCB0eXBlYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3NldFZhbHVlKHRoaXMuZGF0YSwga2V5LCB2YWx1ZSk7XG4gIH1cblxuICBnZXQoYWNjZXNzKSB7XG4gICAgbGV0IHJldHVyblZhbHVlO1xuICAgIGlmIChhY2Nlc3MpIHtcbiAgICAgIHJldHVyblZhbHVlID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5kYXRhLCBhY2Nlc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IHRoaXMuX2dldERhdGEodGhpcy5kYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgX2V4aXN0c0luU2NoZW1hKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGxldCByZXR1cm5WYWx1ZTtcbiAgICBjb25zdCBfYWNjZXNzID0gKHR5cGVvZihhY2Nlc3MpID09PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoX2FjY2Vzcy5sZW5ndGggPiAxICYmIG9ialtfYWNjZXNzWzBdXSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSB0aGlzLl9leGlzdHNJblNjaGVtYShvYmpbX2FjY2Vzcy5zaGlmdCgpXS52YWx1ZSwgX2FjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9ialtfYWNjZXNzWzBdXSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgX2NoZWNrVHlwZShvYmosIGFjY2VzcywgdmFsdWUpIHtcbiAgICBsZXQgcmV0dXJuVmFsdWU7XG4gICAgY29uc3QgX2FjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PT0gJ3N0cmluZycpID8gYWNjZXNzLnNwbGl0KCcuJykgOiBhY2Nlc3M7XG4gICAgaWYgKF9hY2Nlc3MubGVuZ3RoID4gMSAmJiBvYmpbX2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVyblZhbHVlID0gdGhpcy5fY2hlY2tUeXBlKG9ialtfYWNjZXNzLnNoaWZ0KCldLnZhbHVlLCBfYWNjZXNzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVyblZhbHVlID0gb2JqW19hY2Nlc3NbMF1dLnR5cGUgPT09IHR5cGVvZiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgX2dldERhdGEob2JqLCBuZXdPYmogPSB7fSkge1xuICAgIGZvciAoY29uc3QgZWxlbWVudCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmpbZWxlbWVudF0udHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbmV3T2JqW2VsZW1lbnRdID0ge307XG4gICAgICAgIHRoaXMuX2dldERhdGEob2JqW2VsZW1lbnRdLnZhbHVlLCBuZXdPYmpbZWxlbWVudF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3T2JqW2VsZW1lbnRdID0gb2JqW2VsZW1lbnRdLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xuICB9XG5cbiAgX3NldFZhbHVlKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGNvbnN0IF9hY2Nlc3MgPSAodHlwZW9mKGFjY2VzcykgPT09ICdzdHJpbmcnKSA/IGFjY2Vzcy5zcGxpdCgnLicpIDogYWNjZXNzO1xuICAgIGlmIChfYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW19hY2Nlc3NbMF1dLnZhbHVlKSB7XG4gICAgICB0aGlzLl9zZXRWYWx1ZShvYmpbX2FjY2Vzcy5zaGlmdCgpXS52YWx1ZSwgX2FjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAob2JqW19hY2Nlc3NbMF1dLnZhbHVlKSB7XG4gICAgICBvYmpbX2FjY2Vzc1swXV0udmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBfZ2V0VmFsdWUob2JqLCBhY2Nlc3MpIHtcbiAgICBsZXQgcmV0dXJuVmFsdWU7XG4gICAgbGV0IF9hY2Nlc3MgPSBhY2Nlc3M7XG4gICAgX2FjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PT0gJ3N0cmluZycpID8gX2FjY2Vzcy5zcGxpdCgnLicpIDogX2FjY2VzcztcbiAgICBpZiAoX2FjY2Vzcy5sZW5ndGggPiAxICYmIG9ialtfYWNjZXNzWzBdXSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSB0aGlzLl9nZXRWYWx1ZShvYmpbX2FjY2Vzcy5zaGlmdCgpXS52YWx1ZSwgX2FjY2Vzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVyblZhbHVlID0gb2JqW19hY2Nlc3NbMF1dLnZhbHVlIHx8ICcnO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxuICBzZXQgZW5kcG9pbnRQcmVmaXgocHJlZml4KSB7XG4gICAgdGhpcy5fZW5kcG9pbnRQcmVmaXggPSBwcmVmaXg7XG4gIH1cblxuICBnZXQgZW5kcG9pbnRQcmVmaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZHBvaW50UHJlZml4IHx8ICdhcGkvdmknO1xuICB9XG5cbiAgLy8gVE9ETzogcmVmYWN0b3IgdGhpcyB0byBoZWxwZXJcbiAgX2NoZWNrU3RhdHVzKHJlc3BvbnNlKSB7XG4gICAgbGV0IHJldHVyblZhbHVlO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuICAgICAgcmV0dXJuVmFsdWUgPSByZXNwb25zZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIF9wYXJzZUpTT04ocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICB9XG5cbiAgLy8gVE9ETzogQ1JVRCBvcGVyYXRpb25zIHhociBjYWxscy4gcmV0dXJuIHByb21pc2VzXG4gIHNhdmUoaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnRQcmVmaXh9LyR7dGhpcy5tb2RlbE5hbWV9LyR7aWR9YDtcbiAgICBjb25zdCBzZW5kT2JqID0ge307XG4gICAgY29uc3QgeGhyUHJvcGVydGllcyA9IHtcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2VuZE9iaiksXG4gICAgfTtcblxuICAgIHNlbmRPYmpbdGhpcy5tb2RlbE5hbWVdID0gdGhpcy5nZXQoKTtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSBwb3N0IHhociBjYWxsIHRvICR7dXJsfWAsIHNlbmRPYmopO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwgeGhyUHJvcGVydGllcylcbiAgICAgIC50aGVuKHRoaXMuX2NoZWNrU3RhdHVzKVxuICAgICAgLnRoZW4odGhpcy5fcGFyc2VKU09OKTtcbiAgfVxuXG4gIGZldGNoKGlkID0gdGhpcy5nZXQoJ2lkJykpIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgY29uc3QgeGhyUHJvcGVydGllcyA9IHtcbiAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgfTtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSBnZXQgeGhyIGNhbGwgdG8gJHt1cmx9YCk7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB4aHJQcm9wZXJ0aWVzKVxuICAgICAgLnRoZW4odGhpcy5fY2hlY2tTdGF0dXMpXG4gICAgICAudGhlbih0aGlzLl9wYXJzZUpTT04pO1xuICB9XG5cbiAgdXBkYXRlKGlkID0gdGhpcy5nZXQoJ2lkJykpIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgY29uc3Qgc2VuZE9iaiA9IHt9O1xuICAgIHNlbmRPYmpbdGhpcy5tb2RlbE5hbWVdID0gdGhpcy5nZXQoKTtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSB1cGRhdGUgeGhyIGNhbGwgdG8gJHt1cmx9YCwgc2VuZE9iaik7XG5cbiAgICAvLyBHaXRodWIncyBmZXRjaCBwcm9qZWN0IGRvZXNudCBhcHBlYXIgdG8gc3VwcG9ydCBVUERBVEVcbiAgICAvLyBUT0RPOiBpbnZlc3RpZ2F0ZSB0aGUgYWJvdmUgc3RhdGVtZW50XG4gICAgLy8gZmV0Y2godXJsLCB7XG4gICAgLy8gICBtZXRob2Q6ICdVUERBVEUnLFxuICAgIC8vICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2VuZE9iailcbiAgICAvLyB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnRQcmVmaXh9LyR7dGhpcy5tb2RlbE5hbWV9LyR7aWR9YDtcbiAgICBjb25zdCB4aHJQcm9wZXJ0aWVzID0ge1xuICAgICAgbWV0aG9kOiAnZGVsZXRlJyxcbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKGBtYWtlIGRlbGV0ZSB4aHIgY2FsbCB0byAke3VybH1gKTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHhoclByb3BlcnRpZXMpXG4gICAgICAudGhlbih0aGlzLl9jaGVja1N0YXR1cylcbiAgICAgIC50aGVuKHRoaXMuX3BhcnNlSlNPTik7XG4gIH1cbn1cbiIsIi8vIGFsbG93aW5nIGZvci4ub2Ygb2Ygbm9kZWxpc3RzIGZvciBDaHJvbWUgc3VwcG9ydFxuTm9kZUxpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBBcnJheS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcbmltcG9ydCB7VXRpbHN9IGZyb20gJy4vVXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaW5kaW5nIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5fZmluZEJpbmRhYmxlKCk7XG4gICAgdGhpcy51dGlscyA9IG5ldyBVdGlscygpO1xuXG4gICAgbGV0IGN1cnJlbnREYXRhID0gY3VycmVudERhdGEgfHwge307XG5cbiAgICAvLyB3YXRjaGluZyB0aGlzLmRhdGEgZm9yIHByb2dyYW1tYXRpY2FsIHVwZGF0ZXNcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy51dGlscy5jb21wYXJlKGN1cnJlbnREYXRhLCB0aGlzLmRhdGEpID09PSBmYWxzZSkge1xuICAgICAgICBjdXJyZW50RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKSk7XG4gICAgICAgIHRoaXMuX3BvcHVsYXRlQmluZGluZ3MoKTtcbiAgICAgIH1cbiAgICB9LCAxMCk7XG4gIH1cblxuICBfcG9wdWxhdGVCaW5kaW5ncygpIHtcbiAgICBmb3IgKGNvbnN0IGVsbSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbbGlhaXNvbi1iaW5kXScpKSB7XG4gICAgICBjb25zdCBiaW5kTmFtZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKTtcblxuICAgICAgLy8gcHJldmVudCB0aGUgaW5wdXQgeW91cmUgdHlwaW5nIGluIGZyb20gdXBkYXRpbmcuIHByZXZlbnRzIHRoZSBjdXJzb3IgZnJvbSBqdW1waW5nIHRvIHRoZSBlbmRcbiAgICAgIC8vIG9ubHkgdXBkYXRlcyBiaW5kaW5ncyB0aGF0IG5lZWQgdG8gYmUgdXBkYXRlZFxuICAgICAgaWYgKGVsbSAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoZWxtLmdldEF0dHJpYnV0ZSgnbGlhaXNvbi1iaW5kJykgPT09IGJpbmROYW1lIHx8IGJpbmROYW1lID09PSBudWxsKSkge1xuICAgICAgICB0aGlzLl9zZXRFbGVtZW50Q29udGVudChlbG0sIHRoaXMuX2dldFZhbHVlKHRoaXMuZGF0YSwgZWxtLmdldEF0dHJpYnV0ZSgnbGlhaXNvbi1iaW5kJykpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZmluZEJpbmRhYmxlKCkge1xuICAgIGZvciAoY29uc3QgZWxtIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsaWFpc29uLWJpbmRdJykpIHtcbiAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIC8vIHNldHRpbWVvdXQgYWxsb3dzIHRoZSBrZXlkb3duIGV2ZW50IGdvIGdldCB0aGUgbmV3IHZhbHVlXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fc2V0VmFsdWUodGhpcy5kYXRhLCBlbG0uZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKSwgZXZlbnQuc3JjRWxlbWVudC52YWx1ZSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX3NldEVsZW1lbnRDb250ZW50KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgLy8gYWxsb3dzIG11bHRpcGxlIGNvbXBvbmVudHNcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgX3NldFZhbHVlKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGxldCBfYWNjZXNzID0gYWNjZXNzO1xuICAgIGlmICh0eXBlb2YoX2FjY2VzcykgPT09ICdzdHJpbmcnKSB7XG4gICAgICBfYWNjZXNzID0gX2FjY2Vzcy5zcGxpdCgnLicpO1xuICAgIH1cbiAgICBpZiAoX2FjY2Vzcy5sZW5ndGggPiAxICYmIG9ialtfYWNjZXNzWzBdXSkge1xuICAgICAgdGhpcy5fc2V0VmFsdWUob2JqW19hY2Nlc3Muc2hpZnQoKV0sIF9hY2Nlc3MsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmpbX2FjY2Vzc1swXV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBvYmpbX2FjY2Vzc1swXV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBfZ2V0VmFsdWUob2JqLCBhY2Nlc3MpIHtcbiAgICBsZXQgX2FjY2VzcyA9IGFjY2VzcztcbiAgICBsZXQgcmV0dXJuVmFsdWU7XG4gICAgaWYgKHR5cGVvZihfYWNjZXNzKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIF9hY2Nlc3MgPSBfYWNjZXNzLnNwbGl0KCcuJyk7XG4gICAgfVxuICAgIGlmIChfYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW19hY2Nlc3NbMF1dKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IHRoaXMuX2dldFZhbHVlKG9ialtfYWNjZXNzLnNoaWZ0KCldLCBfYWNjZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvYmpbX2FjY2Vzc1swXV07XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIHJlZnJlc2goZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5fcG9wdWxhdGVCaW5kaW5ncygpO1xuICB9XG59XG4iLCJpbXBvcnQge1V0aWxzfSBmcm9tICcuL1V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy51dGlscyA9IG5ldyBVdGlscygpO1xuICAgIHRoaXMudmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tsaWFpc29uLXZpZXddJyk7XG4gICAgdGhpcy5wYXRocyA9IFtdO1xuICAgIHRoaXMud2lsZGNhcmRzID0gW107XG4gICAgLy8gZ29lcyB0byBoYXNoIHVybFxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5nbyh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSkpLCAwKTtcbiAgICAvLyBhbGxvd3MgYmFjay9mb3J3YXJkIGJ1dHRvbnNcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoZXZlbnQpID0+IHRoaXMuZ28oZXZlbnQuc3RhdGUgfHwgd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLCBmYWxzZSkpO1xuICB9XG5cbiAgc3RhdGUoZGF0YSkge1xuICAgIGlmIChkYXRhLm5hbWUuaW5kZXhPZignOicpID4gMCkge1xuICAgICAgdGhpcy53aWxkY2FyZHMucHVzaChkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXRocy5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZhbGxiYWNrKGRhdGEpIHtcbiAgICB0aGlzLnBhdGhzLnB1c2goZGF0YSk7XG4gICAgdGhpcy5fZmFsbGJhY2sgPSBkYXRhO1xuICB9XG5cbiAgLy8gaW50ZWdyYXRpb24gdGVzdHMgY292ZXIgdGhpc1xuICBnbyhyb3V0ZSkge1xuICAgIGNvbnNvbGUubG9nKGBnb2luZyB0byBzdGF0ZSAke3JvdXRlfWApO1xuICAgIGNvbnN0IG9iaiA9IHRoaXMuX2ZpbmRSb3V0ZUluUGF0aHMocm91dGUpO1xuICAgIGlmICghb2JqKSB7XG4gICAgICB0aGlzLmdvKHRoaXMuX2ZhbGxiYWNrLm5hbWUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmZXRjaChvYmoudGVtcGxhdGVVcmwpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIH0pLnRoZW4oKHRlbXBsYXRlKSA9PiB7XG4gICAgICAgIHRoaXMudmlldy5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gVE9ETzogY2xlYW4gdGhpcyB1cC4gdGhlcmUgaGFzIHRvIGJlIGEgYmV0dGVyIHdheVxuICBfZmluZFJvdXRlSW5QYXRocyhyb3V0ZSkge1xuICAgIGZvciAoY29uc3QgcGF0aCBvZiB0aGlzLnBhdGhzKSB7XG4gICAgICBpZiAocGF0aC5uYW1lID09PSByb3V0ZSkgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIGNvbnN0IF9yb3V0ZSA9IHJvdXRlLnN1YnN0cmluZygxKS5zcGxpdCgnLycpO1xuICAgIGZvciAoY29uc3Qgd2lsZGNhcmQgb2YgdGhpcy53aWxkY2FyZHMpIHtcbiAgICAgIGNvbnN0IF93aWxkY2FyZCA9IHdpbGRjYXJkLm5hbWUuc3Vic3RyaW5nKDEpLnNwbGl0KCcvJyk7XG4gICAgICBpZiAoX3dpbGRjYXJkLmxlbmd0aCA9PT0gX3JvdXRlLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDAsIGxlbiA9IF93aWxkY2FyZC5sZW5ndGg7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKF93aWxkY2FyZFtpbmRleF0uaW5kZXhPZignOicpID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gX3dpbGRjYXJkO1xuICAgICAgICAgICAgdGVtcFtpbmRleF0gPSBfcm91dGVbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHRoaXMudXRpbHMuY29tcGFyZSh0ZW1wLCBfcm91dGUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB3aWxkY2FyZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vICogb24gcGFnZSBsb2FkLCBnZXQgdXJsIGFuZCBsb2FkIGFwcHJvcHJpYXRlIHRlbXRwbGF0ZVxuLy8gKiBvbiB1cmwgY2hhbmdlLCB1cGRhdGUgdGVtcGxhdGVcbi8vICogYWxsb3cgd2lsZGNhcmRzIGluIHBhdGhzIC90ZW1wbGF0ZS91c2VyLzppZFxuLy8gcGFzcyB2YXJpYWJsZXMgdG8gdGVtcGxhdGVcbi8vIGFsbG93IGNvbXBvbmVudCB0byBiZSBkZWNsYXJlZCBpbiByb3V0ZSBvYmplY3Rcbi8vICogZ2V0IHN0YXRlIChpZiBzdGF0ZSA9PSAnaHVob2hvaGFvJykuLi5cbi8vICogdXBkYXRlIHN0YXRlIG9uIGZvcndhcmQvYmFja1xuLy8gKiByb3V0ZXMgb24gcmVmcmVzaFxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXRpbHMge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgX2hhc2hlcih2YWwpIHtcbiAgICBsZXQgaGFzaCA9IDA7XG4gICAgbGV0IGluZGV4O1xuICAgIGxldCBsZW47XG4gICAgY29uc3Qgc3RyaW5nID0gdmFsLnRvU3RyaW5nKCk7XG4gICAgZm9yIChpbmRleCA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICBoYXNoID0gKCgoaGFzaCA8PCA1KSAtIGhhc2gpICsgc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpKSAmIDB4RkZGRkZGRkY7XG4gICAgfVxuICAgIHJldHVybiBoYXNoO1xuICB9XG5cbiAgX29iamVjdChzZWxmLCBvYmosIHJlc3VsdCA9IDApIHtcbiAgICBsZXQgX3Jlc3VsdCA9IHJlc3VsdDtcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmpbcHJvcGVydHldID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0KHNlbGYsIG9ialtwcm9wZXJ0eV0sIF9yZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgX3Jlc3VsdCArPSBzZWxmLl9oYXNoZXIocHJvcGVydHkgKyBzZWxmLl9oYXNoZXIob2JqW3Byb3BlcnR5XSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX3Jlc3VsdDtcbiAgfVxuXG4gIGhhc2goaW5wdXQpIHtcbiAgICBjb25zdCB0eXBlcyA9IHtcbiAgICAgICdzdHJpbmcnOiB0aGlzLl9oYXNoZXIsXG4gICAgICAnbnVtYmVyJzogdGhpcy5faGFzaGVyLFxuICAgICAgJ2Jvb2xlYW4nOiB0aGlzLl9oYXNoZXIsXG4gICAgICAnb2JqZWN0JzogdGhpcy5vYmplY3QsXG4gICAgfTtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuXG4gICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVzW3R5cGVdID8gdHlwZXNbdHlwZV0odGhpcywgaW5wdXQpICsgdGhpcy5faGFzaGVyKHR5cGUpIDogMDtcbiAgfVxuXG4gIGNvbXBhcmVIYXNoZXMoaXRlbUEsIGl0ZW1CKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaChpdGVtQSkgPT09IHRoaXMuaGFzaChpdGVtQik7XG4gIH1cblxuICAvLyBmYXN0ZXIgdGhhbiBjb21wYXJlSGFzaGVzXG4gIGNvbXBhcmUoaXRlbUEsIGl0ZW1CKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGl0ZW1BKSA9PT0gSlNPTi5zdHJpbmdpZnkoaXRlbUIpO1xuICB9XG59XG4iLCJpbXBvcnQgTGlhaXNvbiBmcm9tICcuL0xpYWlzb24nO1xuaW1wb3J0IEJpbmRpbmcgZnJvbSAnLi9CaW5kaW5nJztcbmltcG9ydCBVc2VyTW9kZWwgZnJvbSAnLi9Vc2VyTW9kZWwnO1xuaW1wb3J0IFZpZXdNb2RlbCBmcm9tICcuL1ZpZXdNb2RlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4YW1wbGUge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5iaW5kID0gbmV3IExpYWlzb24oZGF0YSk7XG4gICAgY29uc29sZS5sb2codGhpcy5iaW5kKTtcbiAgICB0aGlzLmJpbmRpbmcgPSBuZXcgQmluZGluZyh0aGlzLmJpbmQpO1xuICAgIHRoaXMuZXhhbXBsZUJpbmRpbmcoKTtcbiAgICB0aGlzLmV4YW1wbGVSb3V0ZXIoKTtcbiAgfVxuXG4gIGV4YW1wbGVCaW5kaW5nKCkge1xuICAgIC8vIGhlcmUgeW91IGhhdmUgYWNjZXNzIHRvIHRoaXMuYmluZC51c2VyIGFuZCB0aGlzLmJpbmQucHJvZ3JhbW1pbmdfbGFuZ3VhZ2VzXG4gICAgLy8gY29uc29sZS5sb2codGhpcy5iaW5kLnVzZXIpO1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuYmluZC5wcm9ncmFtbWluZ19sYW5ndWFnZXMpO1xuXG4gICAgLy8gbW9kZWwgZXhhbXBsZXNcbiAgICBjb25zdCB1c2VyID0gbmV3IFVzZXJNb2RlbCgpO1xuICAgIHVzZXIuc2V0KCdhZ2UnLCAnODc3NycpOyAvLyBzaG91bGQgZmFpbFxuICAgIHVzZXIuc2V0KCduYW1lJywgJ215IGZpcnN0IG5hbWUgb24gdXNlciBtb2RlbCcpOyAvLyBzaG91bGQgcGFzc1xuICAgIHVzZXIuc2V0KCdhZ2UnLCB7XG4gICAgICBhZ2U6IDMzLFxuICAgIH0pOyAvLyBzaG91bGQgZmFpbFxuICAgIHVzZXIuc2V0KCdhZ2UnLCA5OTkpOyAvLyBzaG91bGQgcGFzc1xuICAgIHVzZXIuc2V0KCdhZGRyZXNzJywgJ215IGFkZHJlc3MnKTsgLy8gc2hvdWxkIHBhc3NcblxuICAgIC8vIHNldHMgZGF0YSBiaW5kaW5nXG4gICAgLy8gdGhpcy5iaW5kLnVzZXIubmFtZSA9IHVzZXIuZ2V0KCduYW1lJylcbiAgICB1c2VyLnNldCgnYWRkcmVzcycsIHVzZXIudXBDYXNlKCdteSBzZWNvbmQgYWRkcmVzcycpKTsgLy8gc2hvdWxkIHBhc3MgYW5kIHBvc3RmaXggXCIhXCIgdG8gdGhlIGFkZHJlc3NcblxuICAgIHVzZXIuc2F2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3RoZW4nKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0IGZhaWxlZCcsIGVycm9yKTtcbiAgICB9KTtcbiAgICB1c2VyLnVwZGF0ZSgpO1xuICAgIHVzZXIuZmV0Y2goKS50aGVuKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVuJyk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVxdWVzdCBmYWlsZWQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgdXNlci5kZXN0cm95KCkudGhlbigoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygndGhlbicpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3QgZmFpbGVkJywgZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgLy8gc2Vjb25kIG1vZGVsXG4gICAgY29uc3Qgdmlld21vZGVsID0gbmV3IFZpZXdNb2RlbCgpO1xuICAgIC8vIHNob3VsZCBwYXNzXG4gICAgdmlld21vZGVsLnNldCgnc2luZ2xlJywgJ3VwZGF0ZWQgdmlhIHZpZXdtb2RlbCBtb2RlbCBzZXQgZnVuY3Rpb24nKTtcbiAgICAvLyBzaG91bGQgcGFzc1xuICAgIHZpZXdtb2RlbC5zZXQoJ3VzZXIubmFtZScsICdteSBzZWNvbmQgZXhhbXBsZSBuYW1lJyk7XG4gICAgLy8gc2hvdWxkIGZhaWxcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFnZScsIHtcbiAgICAgIGFnZTogMjIsXG4gICAgfSk7XG4gICAgLy8gc2hvdWxkIGZhaWxcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFnZScsIDQ0NCk7XG4gICAgLy8gc2hvdWxkIGZhaWxcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFkZHJlc3MnLCA3Nzg3OCk7XG4gICAgLy8gc2hvdWxkIHBhc3NcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLmFkZHJlc3MnLCAnbXkgc2Vjb25kIGFkZHJlc3MnKTtcblxuICAgIC8vIHNldHMgZGF0YSBiaW5kaW5nXG4gICAgLy8gdGhpcy5iaW5kID0gdmlld21vZGVsLmdldCgpXG4gICAgLy8gdGhpcy5iaW5kLnVzZXIgPSB1c2VyLmdldCgpXG4gICAgdGhpcy5iaW5kaW5nLnJlZnJlc2godGhpcy5iaW5kKTtcbiAgfVxuXG4gIGV4YW1wbGVSb3V0ZXIoKSB7XG4gICAgLy8gY2hhbmdlIHN0YXRlIHRvIC9saXN0XG4gICAgLy8gcm91dGVyLmdvKCdob2Rvci8xMicsIHtteWRhdGE6MTIzNDU1NiwgbXlvYmo6e25hbWU6J3NoZXJsb2NrJ319KTtcbiAgICAvLyBzZXRUaW1lb3V0KCgpPT4gd2luZG93LnJvdXRlci5nbygnbGlzdCcpLDIwMDApXG4gIH1cbn1cbiIsImltcG9ydCBMaWFpc29uIGZyb20gJy4vTGlhaXNvbic7XG5pbXBvcnQgQmluZGluZyBmcm9tICcuL0JpbmRpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeGFtcGxlMiB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLmJpbmQgPSBuZXcgTGlhaXNvbihkYXRhKTtcbiAgICB0aGlzLmJpbmRpbmcgPSBuZXcgQmluZGluZyh0aGlzLmJpbmQpO1xuICAgICAgLy8gdGhpcy5hbm90aGVyRnVuY3Rpb24oKVxuICB9XG5cbiAgYW5vdGhlckZ1bmN0aW9uKCkge1xuICAgIC8vIGhlcmUgeW91IGhhdmUgYWNjZXNzIHRvIHRoaXMuZGF0YS51c2VyIGFuZCB0aGlzLmRhdGEucHJvZ3JhbW1pbmdfbGFuZ3VhZ2VzXG4gICAgY29uc29sZS5sb2codGhpcy5iaW5kLnN0cmluZyk7XG4gIH1cbn1cbiIsIi8vIHB1dHMgcm91dGVzIG9uIHRoZSByb3V0ZXIgY2xhc3NcblxuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG4vLyBUT0RPOiBub3QgYXR0YWNoIHRoaXMgdG8gdGhlIGdsb2JhbCBuYW1lc3BhY2VcbndpbmRvdy5yb3V0ZXIgPSB3aW5kb3cucm91dGVyIHx8IG5ldyBSb3V0ZXIoKTtcbndpbmRvdy5yb3V0ZXIuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXJzJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdXNlcmluZGV4Lmh0bWwnLFxufSkuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXIvOmlkJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdXNlci5odG1sJyxcbn0pLnN0YXRlKHtcbiAgbmFtZTogJy91c2VyLzppZC9kZXRhaWxzJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdXNlcmRldGFpbHMuaHRtbCcsXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvdXNlci86aWQvOnN1YmlkJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdXNlcnN1Yi5odG1sJyxcbn0pLnN0YXRlKHtcbiAgbmFtZTogJy9saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvbGlzdC5odG1sJyxcbn0pLnN0YXRlKHtcbiAgbmFtZTogJy8nLFxuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9saXN0Lmh0bWwnLFxufSkuZmFsbGJhY2soe1xuICBuYW1lOiAnLzQwNCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzLzQwNC5odG1sJyxcbn0pO1xuIiwiaW1wb3J0IEJhc2VNb2RlbCBmcm9tICcuL0Jhc2VNb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBVc2VyTW9kZWwgZXh0ZW5kcyBCYXNlTW9kZWwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigndXNlcicsIHtcbiAgICAgIGlkOiB7XG4gICAgICAgIHZhbHVlOiA3ODk3ODcsXG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgdmFsdWU6ICduYW1lJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICB9LFxuICAgICAgYWRkcmVzczoge1xuICAgICAgICB2YWx1ZTogJzIyMWIgYmFrZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgfSxcbiAgICAgIGFnZToge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLy8gZXhhbXBsZSBtb2RlbCBoZWxwZXJcbiAgdXBDYXNlKHN0cikge1xuICAgIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTtcbiAgfVxufVxuIiwiaW1wb3J0IEJhc2VNb2RlbCBmcm9tICcuL0Jhc2VNb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBWaWV3TW9kZWwgZXh0ZW5kcyBCYXNlTW9kZWwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigndmlldycsIHtcbiAgICAgIHNpbmdsZToge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgdmFsdWU6ICdmcm9tIHNjaGVtYScsXG4gICAgICB9LFxuICAgICAgdXNlcjoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICBpZDoge1xuICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICB2YWx1ZTogODg4ODgsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIHZhbHVlOiAnU2hlcmxvY2sgSG9sbWVzJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgdmFsdWU6ICcyMjFiIEJha2VyIFN0cmVldCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBwcm9ncmFtbWluZ0xhbmd1YWdlczoge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICB2YWx1ZTogWydqYXZhc2NyaXB0JywgJ3J1YnknXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsImNvbnN0IGN1cnJlbmN5ID0gKGlucHV0KSA9PiB7XG4gIGNvbnNvbGUubG9nKCdoaGgnKVxuICByZXR1cm4gJyQnICsgaW5wdXQudG9GaXhlZCgyKS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pK1xcLikvZywgJyQxLCcpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
>>>>>>> Stashed changes
