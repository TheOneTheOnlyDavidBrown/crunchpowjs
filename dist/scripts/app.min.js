"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function loadComponent(e,t){return new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this._existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". Doesnt exist in the schema');var a=this._checkType(this.data,e,t);return a?void this._setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". It isnt the right type')}},{key:"get",value:function(e){var t=void 0;return t=e?this._getValue(this.data,e):this._getData(this.data)}},{key:"_existsInSchema",value:function(e,t,n){var a=void 0,r="string"==typeof t?t.split("."):t;return a=r.length>1&&e[r[0]]?this._existsInSchema(e[r.shift()].value,r,n):e[r[0]]?!0:!1}},{key:"_checkType",value:function(e,t,n){var a=void 0,r="string"==typeof t?t.split("."):t;return a=r.length>1&&e[r[0]]?this._checkType(e[r.shift()].value,r,n):e[r[0]].type===typeof n}},{key:"_getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this._getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"_setValue",value:function(e,t,n){var a="string"==typeof t?t.split("."):t;a.length>1&&e[a[0]].value?this._setValue(e[a.shift()].value,a,n):e[a[0]].value&&(e[a[0]].value=n)}},{key:"_getValue",value:function(e,t){var n=void 0,a=t;return a="string"==typeof t?a.split("."):a,n=a.length>1&&e[a[0]]?this._getValue(e[a.shift()].value,a):e[a[0]].value||""}},{key:"_checkStatus",value:function(e){var t=void 0;if(!(e.status>=200&&e.status<300)){var n=new Error(e.statusText);throw n.response=e,n}return t=e}},{key:"_parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={},a={method:"post",body:JSON.stringify(n)};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,a).then(this._checkStatus).then(this._parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"get"};return console.log("make get xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={method:"delete"};return console.log("make delete xhr call to "+t),fetch(t,n).then(this._checkStatus).then(this._parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this._findBindable(),this.utils=new Utils;var a=a||{};setInterval(function(){n.utils.compare(a,n.data)===!1&&(a=JSON.parse(JSON.stringify(n.data)),n._populateBindings())},10)}return _createClass(e,[{key:"_populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var a,r=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(a=r.next()).done);e=!0){var i=a.value,s=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==s&&null!==s||this._setElementContent(i,this._getValue(this.data,i.getAttribute("liaison-bind")))}}catch(o){t=!0,n=o}finally{try{!e&&r["return"]&&r["return"]()}finally{if(t)throw n}}}},{key:"_findBindable",value:function(){var e=this,t=!0,n=!1,a=void 0;try{for(var r,i=function(){var t=r.value;t.addEventListener("keydown",function(n){setTimeout(function(){return e._setValue(e.data,t.getAttribute("liaison-bind"),n.srcElement.value)})})},s=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(r=s.next()).done);t=!0)i()}catch(o){n=!0,a=o}finally{try{!t&&s["return"]&&s["return"]()}finally{if(n)throw a}}}},{key:"_setElementContent",value:function(e,t){void 0!==t&&(e.innerHTML=t,e.value=t)}},{key:"_setValue",value:function(e,t,n){var a=t;"string"==typeof a&&(a=a.split(".")),a.length>1&&e[a[0]]?this._setValue(e[a.shift()],a,n):"string"==typeof e[a[0]]&&(e[a[0]]=n)}},{key:"_getValue",value:function(e,t){var n=t,a=void 0;return"string"==typeof n&&(n=n.split(".")),a=n.length>1&&e[n[0]]?this._getValue(e[n.shift()],n):e[n[0]]}},{key:"refresh",value:function(e){this.data=e,this._populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);for(var n in t)n&&(this[n]=t[n])},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.utils=new Utils,this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this._findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"_findRouteInPaths",value:function(e){var t=this,n=!0,a=!1,r=void 0;try{for(var i,s=this.paths[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var o=i.value;if(o.name===e)return o}}catch(l){a=!0,r=l}finally{try{!n&&s["return"]&&s["return"]()}finally{if(a)throw r}}var u=void 0,c=this._parseRoute(e);return this.wildcards.filter(function(e){return t._parseRoute(e.name).length===c.length}).forEach(function(e){var n=t._parseRoute(e.name);n.forEach(function(a,r){if(0!==a.indexOf(":"))return!1;var i=n;i[r]=c[r],t.utils.compare(i,c)&&(u=e)})}),u}},{key:"_parseRoute",value:function(e){return e.substring(1).split("/")}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),StateMachine=function(){function e(){_classCallCheck(this,e),this._states=[],this._state=""}return _createClass(e,[{key:"getState",value:function(e){var t=!1;return this._states.forEach(function(n){n.name===e&&(t=n)}),t}},{key:"next",value:function(){var e=this,t=void 0;this._states.forEach(function(n,a){n.name===e._state.name&&(t=a)}),this._state=this._states[t+1]}},{key:"_transition",value:function(e,t){var n=e;return t.transitionableFrom.forEach(function(a){a===e.name&&(n=t)}),n}},{key:"states",set:function(e){this._states=e,this._state=e[0]},get:function(){return this._states}},{key:"state",set:function(e){var t=this.getState(e);return this._state=this._transition(this._state,t),this._state},get:function(){return this._state}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Utils=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_hasher",value:function(e){var t=0,n=void 0,a=void 0,r=e.toString();for(n=0,a=r.length;a>n;n++)t=(t<<5)-t+r.charCodeAt(n)&4294967295;return t}},{key:"_object",value:function(e,t){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2],a=n;for(var r in t){if("object"==typeof t[r])return this._object(e,t[r],a);hasOwnProperty.call(t,r)&&(a+=e._hasher(r+e._hasher(t[r])))}return a}},{key:"hash",value:function(e){var t={string:this._hasher,number:this._hasher,"boolean":this._hasher,object:this.object},n=typeof e;return null!==e&&t[n]?t[n](this,e)+this._hasher(n):0}},{key:"compareHashes",value:function(e,t){return this.hash(e)===this.hash(t)}},{key:"compare",value:function(e,t){return JSON.stringify(e)===JSON.stringify(t)}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),this.binding=new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,window.router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,s=n;o=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var o=Object.getOwnPropertyDescriptor(r,i);if(void 0!==o){if("value"in o)return o.value;var l=o.get;return void 0===l?void 0:l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=s,a=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,s=n;o=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var o=Object.getOwnPropertyDescriptor(r,i);if(void 0!==o){if("value"in o)return o.value;var l=o.get;return void 0===l?void 0:l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=s,a=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programmingLanguages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel);
//# sourceMappingURL=data:application/json;base64,