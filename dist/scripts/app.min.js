"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function load_component(e,t){new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this.existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'" because it doesnt exist in the schema');var a=this.checkType(this.data,e,t);return a?void this.setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'" because it it isnt the right type')}},{key:"get",value:function(e){return e?this.getValue(this.data,e):this.getData(this.data)}},{key:"existsInSchema",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.existsInSchema(e[t.shift()].value,t,n):e[t[0]]?!0:!1}},{key:"checkType",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.checkType(e[t.shift()].value,t,n):e[t[0]].type===typeof n}},{key:"getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this.getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"setValue",value:function(e,t,n){t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]].value?this.setValue(e[t.shift()].value,t,n):e[t[0]].value&&(e[t[0]].value=n)}},{key:"getValue",value:function(e,t){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this.getValue(e[t.shift()].value,t):e[t[0]].value||""}},{key:"checkStatus",value:function(e){if(e.status>=200&&e.status<300)return e;var t=new Error(e.statusText);throw t.response=e,t}},{key:"parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,{method:"post",body:JSON.stringify(n)}).then(this.checkStatus).then(this.parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make get xhr call to "+t),fetch(t,{method:"get"}).then(this.checkStatus).then(this.parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make delete xhr call to "+t),fetch(t,{method:"delete"}).then(this.checkStatus).then(this.parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this.findBindable();var a=a||{};setInterval(function(){JSON.stringify(a)!==JSON.stringify(n.data)&&(a=JSON.parse(JSON.stringify(n.data)),n.populateBindings())},10)}return _createClass(e,[{key:"populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var a,r=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(a=r.next()).done);e=!0){var i=a.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this.setElementContent(i,this.getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&r["return"]&&r["return"]()}finally{if(t)throw n}}}},{key:"findBindable",value:function(){var e=this,t=!0,n=!1,a=void 0;try{for(var r,i=function(){var t=r.value;t.addEventListener("keyup",function(n){e.setValue(e.data,t.getAttribute("liaison-bind"),n.target.value)})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(r=o.next()).done);t=!0)i()}catch(s){n=!0,a=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw a}}}},{key:"setElementContent",value:function(e,t){t&&(e.innerHTML=t,e.value=t)}},{key:"setValue",value:function(e,t,n){"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this.setValue(e[t.shift()],t,n):e[t[0]]&&(e[t[0]]=n)}},{key:"getValue",value:function(e,t){return"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this.getValue(e[t.shift()],t):e[t[0]]||""}},{key:"refresh",value:function(e){this.data=e,this.populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);var n=void 0;for(n in t)this[n]=t[n]},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this.findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"findRouteInPaths",value:function(e){var t=!0,n=!1,a=void 0;try{for(var r,i=this.paths[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var o=r.value;if(o.name===e)return o}}catch(s){n=!0,a=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw a}}console.log("not found natural path. searching wildcards"),e=e.substring(1).split("/");var l=!0,u=!1,c=void 0;try{for(var f,h=this.wildcards[Symbol.iterator]();!(l=(f=h.next()).done);l=!0){var d=f.value,p=d.name.substring(1).split("/");if(p.length===e.length)for(var v=0,g=p.length;g>v;v++)if(0===p[v].indexOf(":")){var y=p;if(y[v]=e[v],this.isIdentical(y,e))return d}}}catch(s){u=!0,c=s}finally{try{!l&&h["return"]&&h["return"]()}finally{if(u)throw c}}return console.log("going to fallback"),!1}},{key:"isIdentical",value:function(e,t){var n=e.length;if(n!=t.length)return!1;for(;n--;)if(e[n]!==t[n])return!1;return!0}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,o=n;s=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=o,a=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,o=n;s=u=l=void 0,a=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=i,n=o,a=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programming_languages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJMaWFpc29uLmpzIiwiQmFzZU1vZGVsLmpzIiwiQmluZGluZy5qcyIsIlJvdXRlci5qcyIsInNjcmlwdHMvRXhhbXBsZS5qcyIsInNjcmlwdHMvRXhhbXBsZTIuanMiLCJzY3JpcHRzL1JvdXRlcy5qcyIsInNjcmlwdHMvVXNlck1vZGVsLmpzIiwic2NyaXB0cy9WaWV3TW9kZWwuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsImxvYWRfY29tcG9uZW50IiwibW9kdWxlIiwiZGF0YSIsIndpbmRvdyIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJCYXNlTW9kZWwiLCJtb2RlbE5hbWUiLCJzY2hlbWEiLCJ0aGlzIiwiZXhpc3RzSW5TY2hlbWEiLCJjb25zb2xlIiwid2FybiIsInR5cGVNYXRjaGVzIiwiY2hlY2tUeXBlIiwic2V0VmFsdWUiLCJhY2Nlc3MiLCJnZXRWYWx1ZSIsImdldERhdGEiLCJvYmoiLCJzcGxpdCIsInNoaWZ0IiwidHlwZSIsIm5ld09iaiIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImVsZW1lbnQiLCJyZXNwb25zZSIsInN0YXR1cyIsImVycm9yIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwianNvbiIsImlkIiwiZ2V0IiwidXJsIiwiZW5kcG9pbnRQcmVmaXgiLCJzZW5kT2JqIiwibG9nIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJjaGVja1N0YXR1cyIsInBhcnNlSlNPTiIsIl9mZXRjaCIsImFwcGx5IiwidG9TdHJpbmciLCJzZXQiLCJwcmVmaXgiLCJfZW5kcG9pbnRQcmVmaXgiLCJOb2RlTGlzdCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJCaW5kaW5nIiwiX3RoaXMiLCJmaW5kQmluZGFibGUiLCJjdXJyZW50RGF0YSIsInNldEludGVydmFsIiwicGFyc2UiLCJwb3B1bGF0ZUJpbmRpbmdzIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm5leHQiLCJkb25lIiwiZWxtIiwiYmluZE5hbWUiLCJhY3RpdmVFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwic2V0RWxlbWVudENvbnRlbnQiLCJlcnIiLCJfdGhpczIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9sb29wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJfaXRlcmF0b3IyIiwiaW5uZXJIVE1MIiwiTGlhaXNvbiIsImRhdHVtIiwiUm91dGVyIiwidmlldyIsInF1ZXJ5U2VsZWN0b3IiLCJwYXRocyIsIndpbGRjYXJkcyIsInNldFRpbWVvdXQiLCJnbyIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsImV2ZW50Iiwic3RhdGUiLCJuYW1lIiwiaW5kZXhPZiIsInB1c2giLCJfZmFsbGJhY2siLCJyb3V0ZSIsImZpbmRSb3V0ZUluUGF0aHMiLCJ0ZW1wbGF0ZVVybCIsInRleHQiLCJ0ZW1wbGF0ZSIsInBhdGgiLCJ3aWxkY2FyZCIsIl93aWxkY2FyZCIsImwiLCJ0ZW1wIiwiaXNJZGVudGljYWwiLCJhIiwiYiIsIkV4YW1wbGUiLCJiaW5kIiwiYmluZGluZyIsImV4YW1wbGVCaW5kaW5nIiwiZXhhbXBsZVJvdXRlciIsInVzZXIiLCJVc2VyTW9kZWwiLCJhZ2UiLCJ1cENhc2UiLCJzYXZlIiwidXBkYXRlIiwiZGVzdHJveSIsInZpZXdtb2RlbCIsIlZpZXdNb2RlbCIsInJlZnJlc2giLCJFeGFtcGxlMiIsInN0cmluZyIsInJvdXRlciIsImZhbGxiYWNrIiwiX2dldCIsIl94IiwiX3gyIiwiX3gzIiwiX2FnYWluIiwib2JqZWN0IiwicHJvcGVydHkiLCJyZWNlaXZlciIsImRlc2MiLCJwYXJlbnQiLCJnZXR0ZXIiLCJGdW5jdGlvbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNhbGwiLCJnZXRQcm90b3R5cGVPZiIsIl9CYXNlTW9kZWwiLCJhZGRyZXNzIiwic3RyIiwidG9VcHBlckNhc2UiLCJzaW5nbGUiLCJwcm9ncmFtbWluZ19sYW5ndWFnZXMiXSwibWFwcGluZ3MiOiJBQUNBLFlBSUEsU0FBU0EsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBZ01oSCxRQUFTSCxpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0EySWhILFFBQVNILGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQ3hVakcsUUFBU0MsZ0JBQWVDLEVBQVFDLEdBQzdDLEdBQUlDLFFBQU9GLEdBQVFDLEdEeVZyQixRQUFTTixpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0ErSmhILFFBQVNILGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQWtGaEgsUUFBU0gsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdB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TyxtQkFFVHNLLFNBQ0VySSxLQUFNLFNBQ05qQyxNQUFPLHVCQUliMEssdUJBQ0V6SSxLQUFNLFFBQ05qQyxPQUFRLGFBQWMsV1Rrc0I1QixNQWxDQVAsV1MxckJXdUosRUFBU3FCLEdBQVRyQixHQUFrQi9IIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExpYWlzb24ge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgbGV0IGRhdHVtO1xuICAgIGZvciAoZGF0dW0gaW4gZGF0YSkge1xuICAgICAgdGhpc1tkYXR1bV0gPSBkYXRhW2RhdHVtXTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRfY29tcG9uZW50KG1vZHVsZSwgZGF0YSkge1xuICBuZXcgd2luZG93W21vZHVsZV0oZGF0YSk7XG59XG4iLCIvLyBUT0RPOiBhbGxvdyBhIHNoYXJlZCBmcm9udGVuZC9iYWNrZW5kIHNjaGVtYSBmaWxlXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlTW9kZWwge1xuICBjb25zdHJ1Y3Rvcihtb2RlbE5hbWUsIHNjaGVtYSkge1xuICAgIHRoaXMubW9kZWxOYW1lID0gbW9kZWxOYW1lO1xuICAgIHRoaXMuZGF0YSA9IHNjaGVtYTtcbiAgfVxuXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgbGV0IGV4aXN0c0luU2NoZW1hID0gdGhpcy5leGlzdHNJblNjaGVtYSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpO1xuICAgIGlmICghZXhpc3RzSW5TY2hlbWEpIHtcbiAgICAgIGNvbnNvbGUud2FybihgTm90IHNldHRpbmcgXCIke2tleX1cIiBpbiAke3RoaXMubW9kZWxOYW1lfSBtb2RlbCB0byBcIiR7dmFsdWV9XCIgYmVjYXVzZSBpdCBkb2VzbnQgZXhpc3QgaW4gdGhlIHNjaGVtYWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHlwZU1hdGNoZXMgPSB0aGlzLmNoZWNrVHlwZSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpXG4gICAgaWYgKCF0eXBlTWF0Y2hlcykge1xuICAgICAgY29uc29sZS53YXJuKGBOb3Qgc2V0dGluZyBcIiR7a2V5fVwiIGluICR7dGhpcy5tb2RlbE5hbWV9IG1vZGVsIHRvIFwiJHt2YWx1ZX1cIiBiZWNhdXNlIGl0IGl0IGlzbnQgdGhlIHJpZ2h0IHR5cGVgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZ2V0KGFjY2Vzcykge1xuICAgIGlmIChhY2Nlc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHRoaXMuZGF0YSwgYWNjZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSh0aGlzLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIGV4aXN0c0luU2NoZW1hKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmV4aXN0c0luU2NoZW1hKG9ialthY2Nlc3Muc2hpZnQoKV0udmFsdWUsIGFjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqW2FjY2Vzc1swXV0gPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY2hlY2tUeXBlKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrVHlwZShvYmpbYWNjZXNzLnNoaWZ0KCldLnZhbHVlLCBhY2Nlc3MsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9ialthY2Nlc3NbMF1dLnR5cGUgPT09IHR5cGVvZiB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXREYXRhKG9iaiwgbmV3T2JqID0ge30pIHtcbiAgICBmb3IgKGxldCBlbGVtZW50IGluIG9iaikge1xuICAgICAgaWYgKG9ialtlbGVtZW50XS50eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBuZXdPYmpbZWxlbWVudF0gPSB7fTtcbiAgICAgICAgdGhpcy5nZXREYXRhKG9ialtlbGVtZW50XS52YWx1ZSwgbmV3T2JqW2VsZW1lbnRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtlbGVtZW50XSA9IG9ialtlbGVtZW50XS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfVxuXG4gIHNldFZhbHVlKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0udmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUob2JqW2FjY2Vzcy5zaGlmdCgpXS52YWx1ZSwgYWNjZXNzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChvYmpbYWNjZXNzWzBdXS52YWx1ZSkge1xuICAgICAgb2JqW2FjY2Vzc1swXV0udmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZShvYmosIGFjY2Vzcykge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKG9ialthY2Nlc3Muc2hpZnQoKV0udmFsdWUsIGFjY2Vzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmpbYWNjZXNzWzBdXS52YWx1ZSB8fCAnJztcbiAgICB9XG4gIH1cblxuICBzZXQgZW5kcG9pbnRQcmVmaXgocHJlZml4KSB7XG4gICAgdGhpcy5fZW5kcG9pbnRQcmVmaXggPSBwcmVmaXg7XG4gIH1cblxuICBnZXQgZW5kcG9pbnRQcmVmaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZHBvaW50UHJlZml4IHx8ICdhcGkvdmknO1xuICB9XG5cbiAgLy8gVE9ETzogcmVmYWN0b3IgdGhpcyB0byBoZWxwZXJcbiAgY2hlY2tTdGF0dXMocmVzcG9uc2UpIHtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICAgIHJldHVybiByZXNwb25zZVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dClcbiAgICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2VcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgcGFyc2VKU09OKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9XG5cbiAgLy8gVE9ETzogQ1JVRCBvcGVyYXRpb25zIHhociBjYWxscy4gcmV0dXJuIHByb21pc2VzXG4gIHNhdmUoaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGxldCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgbGV0IHNlbmRPYmogPSB7fTtcbiAgICBzZW5kT2JqW3RoaXMubW9kZWxOYW1lXSA9IHRoaXMuZ2V0KCk7XG4gICAgY29uc29sZS5sb2coYG1ha2UgcG9zdCB4aHIgY2FsbCB0byAke3VybH1gLCBzZW5kT2JqKTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNlbmRPYmopXG4gICAgICB9KS50aGVuKHRoaXMuY2hlY2tTdGF0dXMpXG4gICAgICAudGhlbih0aGlzLnBhcnNlSlNPTik7XG4gIH1cblxuICBmZXRjaChpZCA9IHRoaXMuZ2V0KCdpZCcpKSB7XG4gICAgbGV0IHVybCA9IGAke3RoaXMuZW5kcG9pbnRQcmVmaXh9LyR7dGhpcy5tb2RlbE5hbWV9LyR7aWR9YDtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSBnZXQgeGhyIGNhbGwgdG8gJHt1cmx9YCk7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ2dldCdcbiAgICAgIH0pLnRoZW4odGhpcy5jaGVja1N0YXR1cylcbiAgICAgIC50aGVuKHRoaXMucGFyc2VKU09OKTs7XG4gIH1cblxuICB1cGRhdGUoaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGxldCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgbGV0IHNlbmRPYmogPSB7fTtcbiAgICBzZW5kT2JqW3RoaXMubW9kZWxOYW1lXSA9IHRoaXMuZ2V0KCk7XG4gICAgY29uc29sZS5sb2coYG1ha2UgdXBkYXRlIHhociBjYWxsIHRvICR7dXJsfWAsIHNlbmRPYmopO1xuXG4gICAgLy8gR2l0aHViJ3MgZmV0Y2ggcHJvamVjdCBkb2VzbnQgYXBwZWFyIHRvIHN1cHBvcnQgVVBEQVRFXG4gICAgLy8gVE9ETzogaW52ZXN0aWdhdGUgdGhlIGFib3ZlIHN0YXRlbWVudFxuICAgIC8vIGZldGNoKHVybCwge1xuICAgIC8vICAgbWV0aG9kOiAnVVBEQVRFJyxcbiAgICAvLyAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHNlbmRPYmopXG4gICAgLy8gfSk7XG4gIH1cblxuICBkZXN0cm95KGlkID0gdGhpcy5nZXQoJ2lkJykpIHtcbiAgICBsZXQgdXJsID0gYCR7dGhpcy5lbmRwb2ludFByZWZpeH0vJHt0aGlzLm1vZGVsTmFtZX0vJHtpZH1gO1xuICAgIGNvbnNvbGUubG9nKGBtYWtlIGRlbGV0ZSB4aHIgY2FsbCB0byAke3VybH1gKTtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnZGVsZXRlJ1xuICAgICAgfSkudGhlbih0aGlzLmNoZWNrU3RhdHVzKVxuICAgICAgLnRoZW4odGhpcy5wYXJzZUpTT04pO1xuICB9XG59XG4iLCIvL2FsbG93aW5nIGZvci4ub2Ygb2Ygbm9kZWxpc3RzIGZvciBDaHJvbWUgc3VwcG9ydFxuTm9kZUxpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBBcnJheS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZGluZyB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuZmluZEJpbmRhYmxlKCk7XG5cbiAgICB2YXIgY3VycmVudERhdGEgPSBjdXJyZW50RGF0YSB8fCB7fTtcblxuICAgIC8vIHdhdGNoaW5nIHRoaXMuZGF0YSBmb3IgcHJvZ3JhbW1hdGljYWwgdXBkYXRlc1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIC8vIFRPRE8gZmluZCBhIGJldHRlciB3YXkgdG8gY29tcGFyZVxuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGN1cnJlbnREYXRhKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKSkge1xuICAgICAgICBjdXJyZW50RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKSk7XG4gICAgICAgIHRoaXMucG9wdWxhdGVCaW5kaW5ncygpO1xuICAgICAgfVxuICAgIH0sIDEwKTtcbiAgfVxuXG4gIHBvcHVsYXRlQmluZGluZ3MoKSB7XG4gICAgZm9yIChsZXQgZWxtIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsaWFpc29uLWJpbmRdJykpIHtcbiAgICAgIGxldCBiaW5kTmFtZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKTtcblxuICAgICAgLy9wcmV2ZW50IHRoZSBpbnB1dCB5b3VyZSB0eXBpbmcgaW4gZnJvbSB1cGRhdGluZy4gcHJldmVudHMgdGhlIGN1cnNvciBmcm9tIGp1bXBpbmcgdG8gdGhlIGVuZFxuICAgICAgLy9vbmx5IHVwZGF0ZXMgYmluZGluZ3MgdGhhdCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgICAgIGlmIChlbG0gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKGVsbS5nZXRBdHRyaWJ1dGUoJ2xpYWlzb24tYmluZCcpID09PSBiaW5kTmFtZSB8fCBiaW5kTmFtZSA9PT0gbnVsbCkpIHtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudChlbG0sIHRoaXMuZ2V0VmFsdWUodGhpcy5kYXRhLCBlbG0uZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZpbmRCaW5kYWJsZSgpIHtcbiAgICBmb3IgKGxldCBlbG0gb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2xpYWlzb24tYmluZF0nKSkge1xuICAgICAgLy9rZXlkb3duIGdpdmVzIGJldHRlciByZXNwb25zZSBidXQgY3V0cyBvZmYgdGhlIGZpcnN0IGtleSBiZWNhdXNlIGl0cyBnZXR0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgcHJlIGtleWRvd24gZWxlbWVudFxuICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGUpID0+IHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLmRhdGEsIGVsbS5nZXRBdHRyaWJ1dGUoJ2xpYWlzb24tYmluZCcpLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHNldEVsZW1lbnRDb250ZW50KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgc2V0VmFsdWUob2JqLCBhY2Nlc3MsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZihhY2Nlc3MpID09ICdzdHJpbmcnKSB7XG4gICAgICBhY2Nlc3MgPSBhY2Nlc3Muc3BsaXQoJy4nKTtcbiAgICB9XG4gICAgaWYgKGFjY2Vzcy5sZW5ndGggPiAxICYmIG9ialthY2Nlc3NbMF1dKSB7XG4gICAgICB0aGlzLnNldFZhbHVlKG9ialthY2Nlc3Muc2hpZnQoKV0sIGFjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAob2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIG9ialthY2Nlc3NbMF1dID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0VmFsdWUob2JqLCBhY2Nlc3MpIHtcbiAgICBpZiAodHlwZW9mKGFjY2VzcykgPT0gJ3N0cmluZycpIHtcbiAgICAgIGFjY2VzcyA9IGFjY2Vzcy5zcGxpdCgnLicpO1xuICAgIH1cbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKG9ialthY2Nlc3Muc2hpZnQoKV0sIGFjY2Vzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmpbYWNjZXNzWzBdXSB8fCAnJztcbiAgICB9XG4gIH1cblxuICByZWZyZXNoKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMucG9wdWxhdGVCaW5kaW5ncygpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbGlhaXNvbi12aWV3XScpO1xuICAgIHRoaXMucGF0aHMgPSBbXTtcbiAgICB0aGlzLndpbGRjYXJkcyA9IFtdO1xuICAgIC8vZ29lcyB0byBoYXNoIHVybFxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5nbyh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSkpLCAwKTtcbiAgICAvL2FsbG93cyBiYWNrL2ZvcndhcmQgYnV0dG9uc1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIChldmVudCkgPT4gdGhpcy5nbyhldmVudC5zdGF0ZSB8fCB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksIGZhbHNlKSk7XG4gIH1cblxuICBzdGF0ZShkYXRhKSB7XG4gICAgaWYgKGRhdGEubmFtZS5pbmRleE9mKCc6JykgPiAwKSB7XG4gICAgICB0aGlzLndpbGRjYXJkcy5wdXNoKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhdGhzLnB1c2goZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmFsbGJhY2soZGF0YSkge1xuICAgIHRoaXMucGF0aHMucHVzaChkYXRhKTtcbiAgICB0aGlzLl9mYWxsYmFjayA9IGRhdGE7XG4gIH1cblxuICAvLyBpbnRlZ3JhdGlvbiB0ZXN0cyBjb3ZlciB0aGlzXG4gIGdvKHJvdXRlKSB7XG4gICAgY29uc29sZS5sb2coYGdvaW5nIHRvIHN0YXRlICR7cm91dGV9YCk7XG4gICAgbGV0IG9iaiA9IHRoaXMuZmluZFJvdXRlSW5QYXRocyhyb3V0ZSk7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHRoaXMuZ28odGhpcy5fZmFsbGJhY2submFtZSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZmV0Y2gob2JqLnRlbXBsYXRlVXJsKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICB9KS50aGVuKCh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgICB0aGlzLnZpZXcuaW5uZXJIVE1MID0gdGVtcGxhdGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIFRPRE86IGNsZWFuIHRoaXMgdXAuIHRoZXJlIGhhcyB0byBiZSBhIGJldHRlciB3YXlcbiAgLy8gVE9ETzogd3JpdGUgdW5pdCB0ZXN0IGZvciB0aGlzLiBpbnRlZ3JhdGlvbiB0ZXN0IGlzIGdvb2QgYnV0IHRoaXMgY2FuIGJlIHVuaXQgdGVzdGVkIHdoaWNoIHlpZWxkcyBtb3JlIGNvbnNpc3RlbnQgcmVzdWx0c1xuICBmaW5kUm91dGVJblBhdGhzKHJvdXRlKSB7XG4gICAgZm9yIChsZXQgcGF0aCBvZiB0aGlzLnBhdGhzKSB7XG4gICAgICBpZiAocGF0aC5uYW1lID09PSByb3V0ZSkgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdub3QgZm91bmQgbmF0dXJhbCBwYXRoLiBzZWFyY2hpbmcgd2lsZGNhcmRzJyk7XG5cbiAgICByb3V0ZSA9IHJvdXRlLnN1YnN0cmluZygxKS5zcGxpdCgnLycpO1xuICAgIGZvciAobGV0IHdpbGRjYXJkIG9mIHRoaXMud2lsZGNhcmRzKSB7XG4gICAgICBsZXQgX3dpbGRjYXJkID0gd2lsZGNhcmQubmFtZS5zdWJzdHJpbmcoMSkuc3BsaXQoJy8nKTtcbiAgICAgIGlmIChfd2lsZGNhcmQubGVuZ3RoID09PSByb3V0ZS5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBfd2lsZGNhcmQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKF93aWxkY2FyZFtpXS5pbmRleE9mKCc6JykgPT09IDApIHtcbiAgICAgICAgICAgIGxldCB0ZW1wID0gX3dpbGRjYXJkO1xuICAgICAgICAgICAgdGVtcFtpXSA9IHJvdXRlW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNJZGVudGljYWwodGVtcCwgcm91dGUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiB3aWxkY2FyZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zb2xlLmxvZygnZ29pbmcgdG8gZmFsbGJhY2snKVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRPRE86IHB1dCB0aGlzIGluIGEgaGVscGVyIGxpYnJhcnlcbiAgLy8gdGhpcyBmdW5jdGlvbiB3YXMgZm91bmQgYXQgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83ODM3NDU2L2NvbXBhcmluZy10d28tYXJyYXlzLWluLWphdmFzY3JpcHRcbiAgLy8gdGhpcyBpcyBhIHNoYWxsb3cgY2hlY2tcbiAgaXNJZGVudGljYWwoYSwgYikge1xuICAgIHZhciBpID0gYS5sZW5ndGg7XG4gICAgaWYgKGkgIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5cblxuLy8gKiBvbiBwYWdlIGxvYWQsIGdldCB1cmwgYW5kIGxvYWQgYXBwcm9wcmlhdGUgdGVtdHBsYXRlXG4vLyAqIG9uIHVybCBjaGFuZ2UsIHVwZGF0ZSB0ZW1wbGF0ZVxuLy8gKiBhbGxvdyB3aWxkY2FyZHMgaW4gcGF0aHMgL3RlbXBsYXRlL3VzZXIvOmlkXG4vLyBwYXNzIHZhcmlhYmxlcyB0byB0ZW1wbGF0ZVxuLy8gKiBnZXQgc3RhdGUgKGlmIHN0YXRlID09ICdodWhvaG9oYW8nKS4uLlxuLy8gKiB1cGRhdGUgc3RhdGUgb24gZm9yd2FyZC9iYWNrXG4vLyAqIHJvdXRlcyBvbiByZWZyZXNoXG4iLCJpbXBvcnQgTGlhaXNvbiBmcm9tICcuL0xpYWlzb24nXG5pbXBvcnQgQmluZGluZyBmcm9tICcuL0JpbmRpbmcnXG5pbXBvcnQgVXNlck1vZGVsIGZyb20gJy4vVXNlck1vZGVsJ1xuaW1wb3J0IFZpZXdNb2RlbCBmcm9tICcuL1ZpZXdNb2RlbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhhbXBsZSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLmJpbmQgPSBuZXcgTGlhaXNvbihkYXRhKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzLmJpbmQpO1xuICAgIHRoaXMuYmluZGluZyA9IG5ldyBCaW5kaW5nKHRoaXMuYmluZCk7XG4gICAgdGhpcy5leGFtcGxlQmluZGluZygpO1xuICAgIHRoaXMuZXhhbXBsZVJvdXRlcigpO1xuICB9XG5cbiAgZXhhbXBsZUJpbmRpbmcoKSB7XG4gICAgLy8gaGVyZSB5b3UgaGF2ZSBhY2Nlc3MgdG8gdGhpcy5iaW5kLnVzZXIgYW5kIHRoaXMuYmluZC5wcm9ncmFtbWluZ19sYW5ndWFnZXNcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmJpbmQudXNlcik7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5iaW5kLnByb2dyYW1taW5nX2xhbmd1YWdlcyk7XG5cbiAgICAvL21vZGVsIGV4YW1wbGVzXG4gICAgbGV0IHVzZXIgPSBuZXcgVXNlck1vZGVsKCk7XG4gICAgdXNlci5zZXQoJ2FnZScsICc4Nzc3Jyk7IC8vIHNob3VsZCBmYWlsXG4gICAgdXNlci5zZXQoJ25hbWUnLCAnbXkgZmlyc3QgbmFtZSBvbiB1c2VyIG1vZGVsJyk7IC8vc2hvdWxkIHBhc3NcbiAgICB1c2VyLnNldCgnYWdlJywge1xuICAgICAgYWdlOiAzM1xuICAgIH0pOyAvLyBzaG91bGQgZmFpbFxuICAgIHVzZXIuc2V0KCdhZ2UnLCA5OTkpOyAvL3Nob3VsZCBwYXNzXG4gICAgdXNlci5zZXQoJ2FkZHJlc3MnLCAnbXkgYWRkcmVzcycpOyAvL3Nob3VsZCBwYXNzXG5cbiAgICAvL3NldHMgZGF0YSBiaW5kaW5nXG4gICAgLy8gdGhpcy5iaW5kLnVzZXIubmFtZSA9IHVzZXIuZ2V0KCduYW1lJylcbiAgICB1c2VyLnNldCgnYWRkcmVzcycsIHVzZXIudXBDYXNlKCdteSBzZWNvbmQgYWRkcmVzcycpKTsgLy9zaG91bGQgcGFzcyBhbmQgcG9zdGZpeCBcIiFcIiB0byB0aGUgYWRkcmVzc1xuXG4gICAgdXNlci5zYXZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVuJylcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3QgZmFpbGVkJywgZXJyb3IpXG4gICAgfSk7XG4gICAgdXNlci51cGRhdGUoKTtcbiAgICB1c2VyLmZldGNoKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVuJylcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3QgZmFpbGVkJywgZXJyb3IpXG4gICAgfSk7XG4gICAgdXNlci5kZXN0cm95KCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVuJylcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3QgZmFpbGVkJywgZXJyb3IpXG4gICAgfSk7XG5cbiAgICAvLyBzZWNvbmQgbW9kZWxcbiAgICBsZXQgdmlld21vZGVsID0gbmV3IFZpZXdNb2RlbCgpO1xuICAgIHZpZXdtb2RlbC5zZXQoJ3NpbmdsZScsICd1cGRhdGVkIHZpYSB2aWV3bW9kZWwgbW9kZWwgc2V0IGZ1bmN0aW9uJyk7IC8vIHNob3VsZCBwYXNzXG4gICAgdmlld21vZGVsLnNldCgndXNlci5uYW1lJywgJ215IHNlY29uZCBleGFtcGxlIG5hbWUnKTsgLy9zaG91bGQgcGFzc1xuICAgIHZpZXdtb2RlbC5zZXQoJ3VzZXIuYWdlJywge1xuICAgICAgICBhZ2U6IDIyXG4gICAgICB9KSAvLyBzaG91bGQgZmFpbFxuICAgIHZpZXdtb2RlbC5zZXQoJ3VzZXIuYWdlJywgNDQ0KTsgLy9zaG91bGQgZmFpbFxuICAgIHZpZXdtb2RlbC5zZXQoJ3VzZXIuYWRkcmVzcycsIDc3ODc4KTsgLy9zaG91bGQgZmFpbFxuICAgIHZpZXdtb2RlbC5zZXQoJ3VzZXIuYWRkcmVzcycsICdteSBzZWNvbmQgYWRkcmVzcycpOyAvL3Nob3VsZCBwYXNzXG5cbiAgICAvL3NldHMgZGF0YSBiaW5kaW5nXG4gICAgLy8gdGhpcy5iaW5kID0gdmlld21vZGVsLmdldCgpXG4gICAgLy8gdGhpcy5iaW5kLnVzZXIgPSB1c2VyLmdldCgpXG4gICAgdGhpcy5iaW5kaW5nLnJlZnJlc2godGhpcy5iaW5kKTtcbiAgfVxuXG4gIGV4YW1wbGVSb3V0ZXIoKSB7XG4gICAgLy8gY2hhbmdlIHN0YXRlIHRvIC9saXN0XG4gICAgLy8gcm91dGVyLmdvKCdob2Rvci8xMicsIHtteWRhdGE6MTIzNDU1NiwgbXlvYmo6e25hbWU6J3NoZXJsb2NrJ319KTtcbiAgICAvLyBzZXRUaW1lb3V0KCgpPT4gd2luZG93LnJvdXRlci5nbygnbGlzdCcpLDIwMDApXG4gIH1cbn1cbiIsImltcG9ydCBMaWFpc29uIGZyb20gJy4vTGlhaXNvbidcbmltcG9ydCBCaW5kaW5nIGZyb20gJy4vQmluZGluZydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhhbXBsZTIge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5iaW5kID0gbmV3IExpYWlzb24oZGF0YSk7XG4gICAgbmV3IEJpbmRpbmcodGhpcy5iaW5kKTtcbiAgICAgIC8vIHRoaXMuYW5vdGhlckZ1bmN0aW9uKClcbiAgfVxuXG4gIGFub3RoZXJGdW5jdGlvbigpIHtcbiAgICAvLyBoZXJlIHlvdSBoYXZlIGFjY2VzcyB0byB0aGlzLmRhdGEudXNlciBhbmQgdGhpcy5kYXRhLnByb2dyYW1taW5nX2xhbmd1YWdlc1xuICAgIGNvbnNvbGUubG9nKHRoaXMuYmluZC5zdHJpbmcpO1xuICB9XG59XG4iLCIvLyBwdXRzIHJvdXRlcyBvbiB0aGUgcm91dGVyIGNsYXNzXG5cbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuLy8gVE9ETzogbm90IGF0dGFjaCB0aGlzIHRvIHRoZSBnbG9iYWwgbmFtZXNwYWNlXG53aW5kb3cucm91dGVyID0gd2luZG93LnJvdXRlciB8fCBuZXcgUm91dGVyKCk7XG5yb3V0ZXIuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXJzJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdXNlcmluZGV4Lmh0bWwnXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvdXNlci86aWQnLFxuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy91c2VyLmh0bWwnXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvdXNlci86aWQvZGV0YWlscycsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJkZXRhaWxzLmh0bWwnXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvdXNlci86aWQvOnN1YmlkJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdXNlcnN1Yi5odG1sJ1xufSkuc3RhdGUoe1xuICBuYW1lOiAnL2xpc3QnLFxuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9saXN0Lmh0bWwnXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvbGlzdC5odG1sJ1xufSkuZmFsbGJhY2soe1xuICBuYW1lOiAnLzQwNCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzLzQwNC5odG1sJ1xufSk7XG4iLCJpbXBvcnQgQmFzZU1vZGVsIGZyb20gJy4vQmFzZU1vZGVsJ1xuXG5leHBvcnQgY2xhc3MgVXNlck1vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3VzZXInLCB7XG4gICAgICBpZDoge1xuICAgICAgICB2YWx1ZTogNzg5Nzg3LFxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgdmFsdWU6ICduYW1lJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICBhZGRyZXNzOiB7XG4gICAgICAgIHZhbHVlOiAnMjIxYiBiYWtlJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICBhZ2U6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHR5cGU6ICdudW1iZXInXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvL2V4YW1wbGUgbW9kZWwgaGVscGVyXG4gIHVwQ2FzZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBCYXNlTW9kZWwgZnJvbSAnLi9CYXNlTW9kZWwnXG5cbmV4cG9ydCBjbGFzcyBWaWV3TW9kZWwgZXh0ZW5kcyBCYXNlTW9kZWwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigndmlldycsIHtcbiAgICAgIHNpbmdsZToge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgdmFsdWU6ICdmcm9tIHNjaGVtYSdcbiAgICAgIH0sXG4gICAgICB1c2VyOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIHZhbHVlOiA4ODg4OFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICB2YWx1ZTogJ1NoZXJsb2NrIEhvbG1lcydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgdmFsdWU6ICcyMjFiIEJha2VyIFN0cmVldCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcHJvZ3JhbW1pbmdfbGFuZ3VhZ2VzOiB7XG4gICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgIHZhbHVlOiBbJ2phdmFzY3JpcHQnLCAncnVieSddXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
