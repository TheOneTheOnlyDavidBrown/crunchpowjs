"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function loadComponent(e,t){return new window[e](t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),BaseModel=function(){function e(t,n){_classCallCheck(this,e),this.modelName=t,this.data=n}return _createClass(e,[{key:"set",value:function(e,t){var n=this._existsInSchema(this.data,e,t);if(!n)return void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". Doesnt exist in the schema');var r=this._checkType(this.data,e,t);return r?void this._setValue(this.data,e,t):void console.warn('Not setting "'+e+'" in '+this.modelName+' model to "'+t+'". It isnt the right type')}},{key:"get",value:function(e){return e?this._getValue(this.data,e):this._getData(this.data)}},{key:"_existsInSchema",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this._existsInSchema(e[t.shift()].value,t,n):e[t[0]]?!0:!1}},{key:"_checkType",value:function(e,t,n){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this._checkType(e[t.shift()].value,t,n):e[t[0]].type===typeof n}},{key:"_getData",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];for(var n in e)"object"===e[n].type?(t[n]={},this._getData(e[n].value,t[n])):t[n]=e[n].value;return t}},{key:"_setValue",value:function(e,t,n){t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]].value?this._setValue(e[t.shift()].value,t,n):e[t[0]].value&&(e[t[0]].value=n)}},{key:"_getValue",value:function(e,t){return t="string"==typeof t?t.split("."):t,t.length>1&&e[t[0]]?this._getValue(e[t.shift()].value,t):e[t[0]].value||""}},{key:"_checkStatus",value:function(e){if(e.status>=200&&e.status<300)return e;var t=new Error(e.statusText);throw t.response=e,t}},{key:"_parseJSON",value:function(e){return e.json()}},{key:"save",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};return n[this.modelName]=this.get(),console.log("make post xhr call to "+t,n),fetch(t,{method:"post",body:JSON.stringify(n)}).then(this._checkStatus).then(this._parseJSON)}},{key:"fetch",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make get xhr call to "+t),fetch(t,{method:"get"}).then(this._checkStatus).then(this._parseJSON)})},{key:"update",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e,n={};n[this.modelName]=this.get(),console.log("make update xhr call to "+t,n)}},{key:"destroy",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.get("id"):arguments[0],t=this.endpointPrefix+"/"+this.modelName+"/"+e;return console.log("make delete xhr call to "+t),fetch(t,{method:"delete"}).then(this._checkStatus).then(this._parseJSON)}},{key:"endpointPrefix",set:function(e){this._endpointPrefix=e},get:function(){return this._endpointPrefix||"api/vi"}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();NodeList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator];var Binding=function(){function e(t){var n=this;_classCallCheck(this,e),this.data=t,this._findBindable(),this.utils=new Utils;var r=r||{};setInterval(function(){n.utils.compare(r,n.data)===!1&&(r=JSON.parse(JSON.stringify(n.data)),n._populateBindings())},10)}return _createClass(e,[{key:"_populateBindings",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,a=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(e=(r=a.next()).done);e=!0){var i=r.value,o=document.activeElement.getAttribute("liaison-bind");i===document.activeElement||i.getAttribute("liaison-bind")!==o&&null!==o||this._setElementContent(i,this._getValue(this.data,i.getAttribute("liaison-bind")))}}catch(s){t=!0,n=s}finally{try{!e&&a["return"]&&a["return"]()}finally{if(t)throw n}}}},{key:"_findBindable",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var a,i=function(){var t=a.value;t.addEventListener("keydown",function(n){setTimeout(function(){return e._setValue(e.data,t.getAttribute("liaison-bind"),n.srcElement.value)})})},o=document.querySelectorAll("[liaison-bind]")[Symbol.iterator]();!(t=(a=o.next()).done);t=!0)i()}catch(s){n=!0,r=s}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}}},{key:"_setElementContent",value:function(e,t){void 0!==t&&(e.innerHTML=t,e.value=t)}},{key:"_setValue",value:function(e,t,n){"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this._setValue(e[t.shift()],t,n):"string"==typeof e[t[0]]&&(e[t[0]]=n)}},{key:"_getValue",value:function(e,t){return"string"==typeof t&&(t=t.split(".")),t.length>1&&e[t[0]]?this._getValue(e[t.shift()],t):e[t[0]]}},{key:"refresh",value:function(e){this.data=e,this._populateBindings()}}]),e}(),Liaison=function e(t){_classCallCheck(this,e);for(var n in t)n&&(this[n]=t[n])},_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Router=function(){function e(){var t=this;_classCallCheck(this,e),this.utils=new Utils,this.view=document.querySelector("[liaison-view]"),this.paths=[],this.wildcards=[],setTimeout(function(){return t.go(window.location.hash.substring(1))},0),window.addEventListener("popstate",function(e){return t.go(e.state||window.location.hash.substring(1),!1)})}return _createClass(e,[{key:"state",value:function(e){return e.name.indexOf(":")>0?this.wildcards.push(e):this.paths.push(e),this}},{key:"fallback",value:function(e){this.paths.push(e),this._fallback=e}},{key:"go",value:function(e){var t=this;console.log("going to state "+e);var n=this._findRouteInPaths(e);return n?void fetch(n.templateUrl).then(function(e){return e.text()}).then(function(e){t.view.innerHTML=e}):(this.go(this._fallback.name),!1)}},{key:"_findRouteInPaths",value:function(e){var t=!0,n=!1,r=void 0;try{for(var a,i=this.paths[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var o=a.value;if(o.name===e)return o}}catch(s){n=!0,r=s}finally{try{!t&&i["return"]&&i["return"]()}finally{if(n)throw r}}e=e.substring(1).split("/");var l=!0,u=!1,c=void 0;try{for(var h,f=this.wildcards[Symbol.iterator]();!(l=(h=f.next()).done);l=!0){var d=h.value,p=d.name.substring(1).split("/");if(p.length===e.length)for(var v=0,g=p.length;g>v;v++)if(0===p[v].indexOf(":")){var y=p;if(y[v]=e[v],this.utils.compare(y,e))return d}}}catch(s){u=!0,c=s}finally{try{!l&&f["return"]&&f["return"]()}finally{if(u)throw c}}return!1}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Utils=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_hasher",value:function(e){var t=0,n=void 0,r=void 0,a=e.toString();for(n=0,r=a.length;r>n;n++)t=(t<<5)-t+a.charCodeAt(n)&4294967295;return t}},{key:"_object",value:function(e,t){var n=arguments.length<=2||void 0===arguments[2]?0:arguments[2];for(var r in t){if("object"==typeof t[r])return this._object(e,t[r],n);hasOwnProperty.call(t,r)&&(n+=e._hasher(r+e._hasher(t[r])))}return n}},{key:"hash",value:function(e){var t={string:this._hasher,number:this._hasher,"boolean":this._hasher,object:this.object},n=typeof e;return null!==e&&t[n]?t[n](this,e)+this._hasher(n):0}},{key:"compareHashes",value:function(e,t){return this.hash(e)===this.hash(t)}},{key:"compare",value:function(e,t){return JSON.stringify(e)===JSON.stringify(t)}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),console.log(this.bind),this.binding=new Binding(this.bind),this.exampleBinding(),this.exampleRouter()}return _createClass(e,[{key:"exampleBinding",value:function(){var e=new UserModel;e.set("age","8777"),e.set("name","my first name on user model"),e.set("age",{age:33}),e.set("age",999),e.set("address","my address"),e.set("address",e.upCase("my second address")),e.save().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.update(),e.fetch().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)}),e.destroy().then(function(){console.log("then")})["catch"](function(e){console.log("request failed",e)});var t=new ViewModel;t.set("single","updated via viewmodel model set function"),t.set("user.name","my second example name"),t.set("user.age",{age:22}),t.set("user.age",444),t.set("user.address",77878),t.set("user.address","my second address"),this.binding.refresh(this.bind)}},{key:"exampleRouter",value:function(){}}]),e}(),_createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Example2=function(){function e(t){_classCallCheck(this,e),this.bind=new Liaison(t),this.binding=new Binding(this.bind)}return _createClass(e,[{key:"anotherFunction",value:function(){console.log(this.bind.string)}}]),e}();window.router=window.router||new Router,window.router.state({name:"/users",templateUrl:"templates/userindex.html"}).state({name:"/user/:id",templateUrl:"templates/user.html"}).state({name:"/user/:id/details",templateUrl:"templates/userdetails.html"}).state({name:"/user/:id/:subid",templateUrl:"templates/usersub.html"}).state({name:"/list",templateUrl:"templates/list.html"}).state({name:"/",templateUrl:"templates/list.html"}).fallback({name:"/404",templateUrl:"templates/404.html"});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},UserModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"user",{id:{value:789787,type:"number"},name:{value:"name",type:"string"},address:{value:"221b bake",type:"string"},age:{value:null,type:"number"}})}return _inherits(t,e),_createClass(t,[{key:"upCase",value:function(e){return e.toUpperCase()}}]),t}(BaseModel),_get=function(e,t,n){for(var r=!0;r;){var a=e,i=t,o=n;s=u=l=void 0,r=!1,null===a&&(a=Function.prototype);var s=Object.getOwnPropertyDescriptor(a,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(a);if(null===u)return void 0;e=u,t=i,n=o,r=!0}},ViewModel=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,"view",{single:{type:"string",value:"from schema"},user:{type:"object",value:{id:{type:"number",value:88888},name:{type:"string",value:"Sherlock Holmes"},address:{type:"string",value:"221b Baker Street"}}},programmingLanguages:{type:"array",value:["javascript","ruby"]}})}return _inherits(t,e),t}(BaseModel);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJMaWFpc29uLmpzIiwiQmFzZU1vZGVsLmpzIiwiQmluZGluZy5qcyIsIlJvdXRlci5qcyIsIlV0aWxzLmpzIiwic2NyaXB0cy9FeGFtcGxlLmpzIiwic2NyaXB0cy9FeGFtcGxlMi5qcyIsInNjcmlwdHMvUm91dGVzLmpzIiwic2NyaXB0cy9Vc2VyTW9kZWwuanMiLCJzY3JpcHRzL1ZpZXdNb2RlbC5qcyJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwibG9hZENvbXBvbmVudCIsIm1vZHVsZSIsImRhdGEiLCJ3aW5kb3ciLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiQmFzZU1vZGVsIiwibW9kZWxOYW1lIiwic2NoZW1hIiwidGhpcyIsImV4aXN0c0luU2NoZW1hIiwiX2V4aXN0c0luU2NoZW1hIiwiY29uc29sZSIsIndhcm4iLCJ0eXBlTWF0Y2hlcyIsIl9jaGVja1R5cGUiLCJfc2V0VmFsdWUiLCJhY2Nlc3MiLCJfZ2V0VmFsdWUiLCJfZ2V0RGF0YSIsIm9iaiIsInNwbGl0Iiwic2hpZnQiLCJ0eXBlIiwibmV3T2JqIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiZWxlbWVudCIsInJlc3BvbnNlIiwic3RhdHVzIiwiZXJyb3IiLCJFcnJvciIsInN0YXR1c1RleHQiLCJqc29uIiwiaWQiLCJnZXQiLCJ1cmwiLCJlbmRwb2ludFByZWZpeCIsInNlbmRPYmoiLCJsb2ciLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidGhlbiIsIl9jaGVja1N0YXR1cyIsIl9wYXJzZUpTT04iLCJfZmV0Y2giLCJhcHBseSIsInRvU3RyaW5nIiwic2V0IiwicHJlZml4IiwiX2VuZHBvaW50UHJlZml4IiwiTm9kZUxpc3QiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiQmluZGluZyIsIl90aGlzIiwiX2ZpbmRCaW5kYWJsZSIsInV0aWxzIiwiVXRpbHMiLCJjdXJyZW50RGF0YSIsInNldEludGVydmFsIiwiY29tcGFyZSIsInBhcnNlIiwiX3BvcHVsYXRlQmluZGluZ3MiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibmV4dCIsImRvbmUiLCJlbG0iLCJiaW5kTmFtZSIsImFjdGl2ZUVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJfc2V0RWxlbWVudENvbnRlbnQiLCJlcnIiLCJfdGhpczIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9sb29wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzZXRUaW1lb3V0Iiwic3JjRWxlbWVudCIsIl9pdGVyYXRvcjIiLCJpbm5lckhUTUwiLCJMaWFpc29uIiwiZGF0dW0iLCJSb3V0ZXIiLCJ2aWV3IiwicXVlcnlTZWxlY3RvciIsInBhdGhzIiwid2lsZGNhcmRzIiwiZ28iLCJsb2NhdGlvbiIsImhhc2giLCJzdWJzdHJpbmciLCJldmVudCIsInN0YXRlIiwibmFtZSIsImluZGV4T2YiLCJwdXNoIiwiX2ZhbGxiYWNrIiwicm91dGUiLCJfZmluZFJvdXRlSW5QYXRocyIsInRlbXBsYXRlVXJsIiwidGV4dCIsInRlbXBsYXRlIiwicGF0aCIsIndpbGRjYXJkIiwiX3dpbGRjYXJkIiwiaW5kZXgiLCJsZW4iLCJ0ZW1wIiwidmFsIiwic3RyaW5nIiwiY2hhckNvZGVBdCIsInNlbGYiLCJyZXN1bHQiLCJwcm9wZXJ0eSIsIl9vYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfaGFzaGVyIiwiaW5wdXQiLCJ0eXBlcyIsIm51bWJlciIsImJvb2xlYW4iLCJvYmplY3QiLCJpdGVtQSIsIml0ZW1CIiwiRXhhbXBsZSIsImJpbmQiLCJiaW5kaW5nIiwiZXhhbXBsZUJpbmRpbmciLCJleGFtcGxlUm91dGVyIiwidXNlciIsIlVzZXJNb2RlbCIsImFnZSIsInVwQ2FzZSIsInNhdmUiLCJ1cGRhdGUiLCJkZXN0cm95Iiwidmlld21vZGVsIiwiVmlld01vZGVsIiwicmVmcmVzaCIsIkV4YW1wbGUyIiwicm91dGVyIiwiZmFsbGJhY2siLCJfZ2V0IiwiX3giLCJfeDIiLCJfeDMiLCJfYWdhaW4iLCJyZWNlaXZlciIsImRlc2MiLCJwYXJlbnQiLCJnZXR0ZXIiLCJGdW5jdGlvbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwiX0Jhc2VNb2RlbCIsImFkZHJlc3MiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsInNpbmdsZSIsInByb2dyYW1taW5nTGFuZ3VhZ2VzIl0sIm1hcHBpbmdzIjoiQUFDQSxZQUlBLFNBQVNBLGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQWdNaEgsUUFBU0gsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBOEloSCxRQUFTSCxpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0MxVWpHLFFBQVNDLGVBQWNDLEVBQVFDLEdBQzVDLE1BQU8sSUFBSUMsUUFBT0YsR0FBUUMsR0Q0VjVCLFFB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V2dDLEVBQUtHLEVBQVdGLENBQUtHLEdBQU9DLEVBQVNDLEVBQVM1SSxPQUFXd0ksR0FBUyxFQUFzQixPQUFYekIsSUFBaUJBLEVBQVM4QixTQUFTdEwsVUFBVyxJQUFJbUwsR0FBT2xMLE9BQU9zTCx5QkFBeUIvQixFQUFRVCxFQUFXLElBQWF0RyxTQUFUMEksRUFBSixDQUFpTixHQUFJLFNBQVdBLEdBQVEsTUFBT0EsR0FBSy9LLEtBQWdCLElBQUlpTCxHQUFTRixFQUFLakksR0FBSyxPQUFlVCxVQUFYNEksRUFBK0I1SSxPQUFvQjRJLEVBQU9uQyxLQUFLZ0MsR0FBcFUsR0FBSUUsR0FBU25MLE9BQU91TCxlQUFlaEMsRUFBUyxJQUFlLE9BQVg0QixFQUFtQixNQUFPM0ksT0FBb0JxSSxHQUFLTSxFQUFRTCxFQUFNaEMsRUFBVWlDLEVBQU1FLEVBQVVELEdBQVMsSVVodkI3Y1QsVUFBUyxTQUFBaUIsR0FDVCxRQURBakIsS1YwdkJUbkwsZ0JBQWdCbUMsS1UxdkJQZ0osR0FFVEssS0FBQTVLLE9BQUF1TCxlQUZTaEIsRUFBU3hLLFdBQUEsY0FBQXdCLE1BQUEwSCxLQUFBMUgsS0FFWixRQUNKcUssUUFDRXZKLEtBQU0sU0FDTmxDLE1BQU8sZUFFVDRKLE1BQ0UxSCxLQUFNLFNBQ05sQyxPQUNFNkMsSUFDRVgsS0FBTSxTQUNObEMsTUFBTyxPQUVUdUgsTUFDRXJGLEtBQU0sU0FDTmxDLE1BQU8sbUJBRVRzTCxTQUNFcEosS0FBTSxTQUNObEMsTUFBTyx1QkFJYjBMLHNCQUNFeEosS0FBTSxRQUNObEMsT0FBUSxhQUFjLFdWK3ZCNUIsTUFsQ0FQLFdVdnZCVzJLLEVBQVNpQixHQUFUakIsR0FBa0JuSiIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBMaWFpc29uIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIGZvciAoY29uc3QgZGF0dW0gaW4gZGF0YSkge1xuICAgICAgaWYgKGRhdHVtKSB7XG4gICAgICAgIHRoaXNbZGF0dW1dID0gZGF0YVtkYXR1bV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2FkQ29tcG9uZW50KG1vZHVsZSwgZGF0YSkge1xuICByZXR1cm4gbmV3IHdpbmRvd1ttb2R1bGVdKGRhdGEpO1xufVxuIiwiLy8gVE9ETzogYWxsb3cgYSBzaGFyZWQgZnJvbnRlbmQvYmFja2VuZCBzY2hlbWEgZmlsZVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZU1vZGVsIHtcbiAgY29uc3RydWN0b3IobW9kZWxOYW1lLCBzY2hlbWEpIHtcbiAgICB0aGlzLm1vZGVsTmFtZSA9IG1vZGVsTmFtZTtcbiAgICB0aGlzLmRhdGEgPSBzY2hlbWE7XG4gIH1cblxuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGxldCBleGlzdHNJblNjaGVtYSA9IHRoaXMuX2V4aXN0c0luU2NoZW1hKHRoaXMuZGF0YSwga2V5LCB2YWx1ZSk7XG4gICAgaWYgKCFleGlzdHNJblNjaGVtYSkge1xuICAgICAgY29uc29sZS53YXJuKGBOb3Qgc2V0dGluZyBcIiR7a2V5fVwiIGluICR7dGhpcy5tb2RlbE5hbWV9IG1vZGVsIHRvIFwiJHt2YWx1ZX1cIi4gRG9lc250IGV4aXN0IGluIHRoZSBzY2hlbWFgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHR5cGVNYXRjaGVzID0gdGhpcy5fY2hlY2tUeXBlKHRoaXMuZGF0YSwga2V5LCB2YWx1ZSk7XG4gICAgaWYgKCF0eXBlTWF0Y2hlcykge1xuICAgICAgY29uc29sZS53YXJuKGBOb3Qgc2V0dGluZyBcIiR7a2V5fVwiIGluICR7dGhpcy5tb2RlbE5hbWV9IG1vZGVsIHRvIFwiJHt2YWx1ZX1cIi4gSXQgaXNudCB0aGUgcmlnaHQgdHlwZWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9zZXRWYWx1ZSh0aGlzLmRhdGEsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZ2V0KGFjY2Vzcykge1xuICAgIGlmIChhY2Nlc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRWYWx1ZSh0aGlzLmRhdGEsIGFjY2Vzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXREYXRhKHRoaXMuZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgX2V4aXN0c0luU2NoZW1hKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PT0gJ3N0cmluZycpID8gYWNjZXNzLnNwbGl0KCcuJykgOiBhY2Nlc3M7XG4gICAgaWYgKGFjY2Vzcy5sZW5ndGggPiAxICYmIG9ialthY2Nlc3NbMF1dKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZXhpc3RzSW5TY2hlbWEob2JqW2FjY2Vzcy5zaGlmdCgpXS52YWx1ZSwgYWNjZXNzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmpbYWNjZXNzWzBdXSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBfY2hlY2tUeXBlKG9iaiwgYWNjZXNzLCB2YWx1ZSkge1xuICAgIGFjY2VzcyA9ICh0eXBlb2YoYWNjZXNzKSA9PT0gJ3N0cmluZycpID8gYWNjZXNzLnNwbGl0KCcuJykgOiBhY2Nlc3M7XG4gICAgaWYgKGFjY2Vzcy5sZW5ndGggPiAxICYmIG9ialthY2Nlc3NbMF1dKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2hlY2tUeXBlKG9ialthY2Nlc3Muc2hpZnQoKV0udmFsdWUsIGFjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqW2FjY2Vzc1swXV0udHlwZSA9PT0gdHlwZW9mIHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIF9nZXREYXRhKG9iaiwgbmV3T2JqID0ge30pIHtcbiAgICBmb3IgKGxldCBlbGVtZW50IGluIG9iaikge1xuICAgICAgaWYgKG9ialtlbGVtZW50XS50eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBuZXdPYmpbZWxlbWVudF0gPSB7fTtcbiAgICAgICAgdGhpcy5fZ2V0RGF0YShvYmpbZWxlbWVudF0udmFsdWUsIG5ld09ialtlbGVtZW50XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpbZWxlbWVudF0gPSBvYmpbZWxlbWVudF0udmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdPYmo7XG4gIH1cblxuICBfc2V0VmFsdWUob2JqLCBhY2Nlc3MsIHZhbHVlKSB7XG4gICAgYWNjZXNzID0gKHR5cGVvZihhY2Nlc3MpID09PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0udmFsdWUpIHtcbiAgICAgIHRoaXMuX3NldFZhbHVlKG9ialthY2Nlc3Muc2hpZnQoKV0udmFsdWUsIGFjY2VzcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAob2JqW2FjY2Vzc1swXV0udmFsdWUpIHtcbiAgICAgIG9ialthY2Nlc3NbMF1dLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgX2dldFZhbHVlKG9iaiwgYWNjZXNzKSB7XG4gICAgYWNjZXNzID0gKHR5cGVvZihhY2Nlc3MpID09PSAnc3RyaW5nJykgPyBhY2Nlc3Muc3BsaXQoJy4nKSA6IGFjY2VzcztcbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRWYWx1ZShvYmpbYWNjZXNzLnNoaWZ0KCldLnZhbHVlLCBhY2Nlc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqW2FjY2Vzc1swXV0udmFsdWUgfHwgJyc7XG4gICAgfVxuICB9XG5cbiAgc2V0IGVuZHBvaW50UHJlZml4KHByZWZpeCkge1xuICAgIHRoaXMuX2VuZHBvaW50UHJlZml4ID0gcHJlZml4O1xuICB9XG5cbiAgZ2V0IGVuZHBvaW50UHJlZml4KCkge1xuICAgIHJldHVybiB0aGlzLl9lbmRwb2ludFByZWZpeCB8fCAnYXBpL3ZpJztcbiAgfVxuXG4gIC8vIFRPRE86IHJlZmFjdG9yIHRoaXMgdG8gaGVscGVyXG4gIF9jaGVja1N0YXR1cyhyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgX3BhcnNlSlNPTihyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH1cblxuICAvLyBUT0RPOiBDUlVEIG9wZXJhdGlvbnMgeGhyIGNhbGxzLiByZXR1cm4gcHJvbWlzZXNcbiAgc2F2ZShpZCA9IHRoaXMuZ2V0KCdpZCcpKSB7XG4gICAgbGV0IHVybCA9IGAke3RoaXMuZW5kcG9pbnRQcmVmaXh9LyR7dGhpcy5tb2RlbE5hbWV9LyR7aWR9YDtcbiAgICBsZXQgc2VuZE9iaiA9IHt9O1xuICAgIHNlbmRPYmpbdGhpcy5tb2RlbE5hbWVdID0gdGhpcy5nZXQoKTtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSBwb3N0IHhociBjYWxsIHRvICR7dXJsfWAsIHNlbmRPYmopO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2VuZE9iailcbiAgICAgIH0pLnRoZW4odGhpcy5fY2hlY2tTdGF0dXMpXG4gICAgICAudGhlbih0aGlzLl9wYXJzZUpTT04pO1xuICB9XG5cbiAgZmV0Y2goaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGxldCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgY29uc29sZS5sb2coYG1ha2UgZ2V0IHhociBjYWxsIHRvICR7dXJsfWApO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2Q6ICdnZXQnXG4gICAgICB9KS50aGVuKHRoaXMuX2NoZWNrU3RhdHVzKVxuICAgICAgLnRoZW4odGhpcy5fcGFyc2VKU09OKTtcbiAgfVxuXG4gIHVwZGF0ZShpZCA9IHRoaXMuZ2V0KCdpZCcpKSB7XG4gICAgbGV0IHVybCA9IGAke3RoaXMuZW5kcG9pbnRQcmVmaXh9LyR7dGhpcy5tb2RlbE5hbWV9LyR7aWR9YDtcbiAgICBsZXQgc2VuZE9iaiA9IHt9O1xuICAgIHNlbmRPYmpbdGhpcy5tb2RlbE5hbWVdID0gdGhpcy5nZXQoKTtcbiAgICBjb25zb2xlLmxvZyhgbWFrZSB1cGRhdGUgeGhyIGNhbGwgdG8gJHt1cmx9YCwgc2VuZE9iaik7XG5cbiAgICAvLyBHaXRodWIncyBmZXRjaCBwcm9qZWN0IGRvZXNudCBhcHBlYXIgdG8gc3VwcG9ydCBVUERBVEVcbiAgICAvLyBUT0RPOiBpbnZlc3RpZ2F0ZSB0aGUgYWJvdmUgc3RhdGVtZW50XG4gICAgLy8gZmV0Y2godXJsLCB7XG4gICAgLy8gICBtZXRob2Q6ICdVUERBVEUnLFxuICAgIC8vICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2VuZE9iailcbiAgICAvLyB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koaWQgPSB0aGlzLmdldCgnaWQnKSkge1xuICAgIGxldCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50UHJlZml4fS8ke3RoaXMubW9kZWxOYW1lfS8ke2lkfWA7XG4gICAgY29uc29sZS5sb2coYG1ha2UgZGVsZXRlIHhociBjYWxsIHRvICR7dXJsfWApO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2Q6ICdkZWxldGUnXG4gICAgICB9KS50aGVuKHRoaXMuX2NoZWNrU3RhdHVzKVxuICAgICAgLnRoZW4odGhpcy5fcGFyc2VKU09OKTtcbiAgfVxufVxuIiwiLy9hbGxvd2luZyBmb3IuLm9mIG9mIG5vZGVsaXN0cyBmb3IgQ2hyb21lIHN1cHBvcnRcbk5vZGVMaXN0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl07XG5pbXBvcnQge1V0aWxzfSBmcm9tICcuL1V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZGluZyB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuX2ZpbmRCaW5kYWJsZSgpO1xuICAgIHRoaXMudXRpbHMgPSBuZXcgVXRpbHMoKTtcblxuICAgIGxldCBjdXJyZW50RGF0YSA9IGN1cnJlbnREYXRhIHx8IHt9O1xuXG4gICAgLy8gd2F0Y2hpbmcgdGhpcy5kYXRhIGZvciBwcm9ncmFtbWF0aWNhbCB1cGRhdGVzXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMudXRpbHMuY29tcGFyZShjdXJyZW50RGF0YSwgdGhpcy5kYXRhKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY3VycmVudERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpO1xuICAgICAgICB0aGlzLl9wb3B1bGF0ZUJpbmRpbmdzKCk7XG4gICAgICB9XG4gICAgfSwgMTApO1xuICB9XG5cbiAgX3BvcHVsYXRlQmluZGluZ3MoKSB7XG4gICAgZm9yIChsZXQgZWxtIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsaWFpc29uLWJpbmRdJykpIHtcbiAgICAgIGxldCBiaW5kTmFtZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKTtcblxuICAgICAgLy9wcmV2ZW50IHRoZSBpbnB1dCB5b3VyZSB0eXBpbmcgaW4gZnJvbSB1cGRhdGluZy4gcHJldmVudHMgdGhlIGN1cnNvciBmcm9tIGp1bXBpbmcgdG8gdGhlIGVuZFxuICAgICAgLy9vbmx5IHVwZGF0ZXMgYmluZGluZ3MgdGhhdCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgICAgIGlmIChlbG0gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKGVsbS5nZXRBdHRyaWJ1dGUoJ2xpYWlzb24tYmluZCcpID09PSBiaW5kTmFtZSB8fCBiaW5kTmFtZSA9PT0gbnVsbCkpIHtcbiAgICAgICAgdGhpcy5fc2V0RWxlbWVudENvbnRlbnQoZWxtLCB0aGlzLl9nZXRWYWx1ZSh0aGlzLmRhdGEsIGVsbS5nZXRBdHRyaWJ1dGUoJ2xpYWlzb24tYmluZCcpKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2ZpbmRCaW5kYWJsZSgpIHtcbiAgICBmb3IgKGxldCBlbG0gb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2xpYWlzb24tYmluZF0nKSkge1xuICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgICAvL3NldHRpbWVvdXQgYWxsb3dzIHRoZSBrZXlkb3duIGV2ZW50IGdvIGdldCB0aGUgbmV3IHZhbHVlXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fc2V0VmFsdWUodGhpcy5kYXRhLCBlbG0uZ2V0QXR0cmlidXRlKCdsaWFpc29uLWJpbmQnKSwgZS5zcmNFbGVtZW50LnZhbHVlKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfc2V0RWxlbWVudENvbnRlbnQoZWxlbWVudCwgdmFsdWUpIHtcbiAgICAvLyBhbGxvd3MgbXVsdGlwbGUgY29tcG9uZW50c1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBfc2V0VmFsdWUob2JqLCBhY2Nlc3MsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZihhY2Nlc3MpID09PSAnc3RyaW5nJykge1xuICAgICAgYWNjZXNzID0gYWNjZXNzLnNwbGl0KCcuJyk7XG4gICAgfVxuICAgIGlmIChhY2Nlc3MubGVuZ3RoID4gMSAmJiBvYmpbYWNjZXNzWzBdXSkge1xuICAgICAgdGhpcy5fc2V0VmFsdWUob2JqW2FjY2Vzcy5zaGlmdCgpXSwgYWNjZXNzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW2FjY2Vzc1swXV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBvYmpbYWNjZXNzWzBdXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRWYWx1ZShvYmosIGFjY2Vzcykge1xuICAgIGlmICh0eXBlb2YoYWNjZXNzKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFjY2VzcyA9IGFjY2Vzcy5zcGxpdCgnLicpO1xuICAgIH1cbiAgICBpZiAoYWNjZXNzLmxlbmd0aCA+IDEgJiYgb2JqW2FjY2Vzc1swXV0pIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRWYWx1ZShvYmpbYWNjZXNzLnNoaWZ0KCldLCBhY2Nlc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqW2FjY2Vzc1swXV07XG4gICAgfVxuICB9XG5cbiAgcmVmcmVzaChkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLl9wb3B1bGF0ZUJpbmRpbmdzKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7VXRpbHN9IGZyb20gJy4vVXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnV0aWxzID0gbmV3IFV0aWxzKCk7XG4gICAgdGhpcy52aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2xpYWlzb24tdmlld10nKTtcbiAgICB0aGlzLnBhdGhzID0gW107XG4gICAgdGhpcy53aWxkY2FyZHMgPSBbXTtcbiAgICAvLyBnb2VzIHRvIGhhc2ggdXJsXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmdvKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSksIDApO1xuICAgIC8vIGFsbG93cyBiYWNrL2ZvcndhcmQgYnV0dG9uc1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIChldmVudCkgPT4gdGhpcy5nbyhldmVudC5zdGF0ZSB8fCB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksIGZhbHNlKSk7XG4gIH1cblxuICBzdGF0ZShkYXRhKSB7XG4gICAgaWYgKGRhdGEubmFtZS5pbmRleE9mKCc6JykgPiAwKSB7XG4gICAgICB0aGlzLndpbGRjYXJkcy5wdXNoKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhdGhzLnB1c2goZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmFsbGJhY2soZGF0YSkge1xuICAgIHRoaXMucGF0aHMucHVzaChkYXRhKTtcbiAgICB0aGlzLl9mYWxsYmFjayA9IGRhdGE7XG4gIH1cblxuICAvLyBpbnRlZ3JhdGlvbiB0ZXN0cyBjb3ZlciB0aGlzXG4gIGdvKHJvdXRlKSB7XG4gICAgY29uc29sZS5sb2coYGdvaW5nIHRvIHN0YXRlICR7cm91dGV9YCk7XG4gICAgY29uc3Qgb2JqID0gdGhpcy5fZmluZFJvdXRlSW5QYXRocyhyb3V0ZSk7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHRoaXMuZ28odGhpcy5fZmFsbGJhY2submFtZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZldGNoKG9iai50ZW1wbGF0ZVVybClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgfSkudGhlbigodGVtcGxhdGUpID0+IHtcbiAgICAgICAgdGhpcy52aWV3LmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgICAgfSk7XG4gIH1cblxuICAvLyBUT0RPOiBjbGVhbiB0aGlzIHVwLiB0aGVyZSBoYXMgdG8gYmUgYSBiZXR0ZXIgd2F5XG4gIF9maW5kUm91dGVJblBhdGhzKHJvdXRlKSB7XG4gICAgZm9yIChjb25zdCBwYXRoIG9mIHRoaXMucGF0aHMpIHtcbiAgICAgIGlmIChwYXRoLm5hbWUgPT09IHJvdXRlKSByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgcm91dGUgPSByb3V0ZS5zdWJzdHJpbmcoMSkuc3BsaXQoJy8nKTtcbiAgICBmb3IgKGNvbnN0IHdpbGRjYXJkIG9mIHRoaXMud2lsZGNhcmRzKSB7XG4gICAgICBjb25zdCBfd2lsZGNhcmQgPSB3aWxkY2FyZC5uYW1lLnN1YnN0cmluZygxKS5zcGxpdCgnLycpO1xuICAgICAgaWYgKF93aWxkY2FyZC5sZW5ndGggPT09IHJvdXRlLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDAsIGxlbiA9IF93aWxkY2FyZC5sZW5ndGg7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKF93aWxkY2FyZFtpbmRleF0uaW5kZXhPZignOicpID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gX3dpbGRjYXJkO1xuICAgICAgICAgICAgdGVtcFtpbmRleF0gPSByb3V0ZVtpbmRleF07XG4gICAgICAgICAgICBpZiAodGhpcy51dGlscy5jb21wYXJlKHRlbXAsIHJvdXRlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gd2lsZGNhcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyAqIG9uIHBhZ2UgbG9hZCwgZ2V0IHVybCBhbmQgbG9hZCBhcHByb3ByaWF0ZSB0ZW10cGxhdGVcbi8vICogb24gdXJsIGNoYW5nZSwgdXBkYXRlIHRlbXBsYXRlXG4vLyAqIGFsbG93IHdpbGRjYXJkcyBpbiBwYXRocyAvdGVtcGxhdGUvdXNlci86aWRcbi8vIHBhc3MgdmFyaWFibGVzIHRvIHRlbXBsYXRlXG4vLyBhbGxvdyBjb21wb25lbnQgdG8gYmUgZGVjbGFyZWQgaW4gcm91dGUgb2JqZWN0XG4vLyAqIGdldCBzdGF0ZSAoaWYgc3RhdGUgPT0gJ2h1aG9ob2hhbycpLi4uXG4vLyAqIHVwZGF0ZSBzdGF0ZSBvbiBmb3J3YXJkL2JhY2tcbi8vICogcm91dGVzIG9uIHJlZnJlc2hcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIF9oYXNoZXIodmFsKSB7XG4gICAgbGV0IGhhc2ggPSAwO1xuICAgIGxldCBpbmRleDtcbiAgICBsZXQgbGVuO1xuICAgIGNvbnN0IHN0cmluZyA9IHZhbC50b1N0cmluZygpO1xuICAgIGZvciAoaW5kZXggPSAwLCBsZW4gPSBzdHJpbmcubGVuZ3RoOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgaGFzaCA9ICgoKGhhc2ggPDwgNSkgLSBoYXNoKSArIHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KSkgJiAweEZGRkZGRkZGO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIF9vYmplY3Qoc2VsZiwgb2JqLCByZXN1bHQgPSAwKSB7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BlcnR5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdChzZWxmLCBvYmpbcHJvcGVydHldLCByZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgcmVzdWx0ICs9IHNlbGYuX2hhc2hlcihwcm9wZXJ0eSArIHNlbGYuX2hhc2hlcihvYmpbcHJvcGVydHldKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBoYXNoKGlucHV0KSB7XG4gICAgY29uc3QgdHlwZXMgPSB7XG4gICAgICAnc3RyaW5nJzogdGhpcy5faGFzaGVyLFxuICAgICAgJ251bWJlcic6IHRoaXMuX2hhc2hlcixcbiAgICAgICdib29sZWFuJzogdGhpcy5faGFzaGVyLFxuICAgICAgJ29iamVjdCc6IHRoaXMub2JqZWN0LFxuICAgIH07XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBpbnB1dDtcblxuICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiB0eXBlc1t0eXBlXSA/IHR5cGVzW3R5cGVdKHRoaXMsIGlucHV0KSArIHRoaXMuX2hhc2hlcih0eXBlKSA6IDA7XG4gIH1cblxuICBjb21wYXJlSGFzaGVzKGl0ZW1BLCBpdGVtQikge1xuICAgIHJldHVybiB0aGlzLmhhc2goaXRlbUEpID09PSB0aGlzLmhhc2goaXRlbUIpO1xuICB9XG5cbiAgLy8gZmFzdGVyIHRoYW4gY29tcGFyZUhhc2hlc1xuICBjb21wYXJlKGl0ZW1BLCBpdGVtQikge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShpdGVtQSkgPT09IEpTT04uc3RyaW5naWZ5KGl0ZW1CKTtcbiAgfVxufVxuIiwiaW1wb3J0IExpYWlzb24gZnJvbSAnLi9MaWFpc29uJztcbmltcG9ydCBCaW5kaW5nIGZyb20gJy4vQmluZGluZyc7XG5pbXBvcnQgVXNlck1vZGVsIGZyb20gJy4vVXNlck1vZGVsJztcbmltcG9ydCBWaWV3TW9kZWwgZnJvbSAnLi9WaWV3TW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeGFtcGxlIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuYmluZCA9IG5ldyBMaWFpc29uKGRhdGEpO1xuICAgIGNvbnNvbGUubG9nKHRoaXMuYmluZCk7XG4gICAgdGhpcy5iaW5kaW5nID0gbmV3IEJpbmRpbmcodGhpcy5iaW5kKTtcbiAgICB0aGlzLmV4YW1wbGVCaW5kaW5nKCk7XG4gICAgdGhpcy5leGFtcGxlUm91dGVyKCk7XG4gIH1cblxuICBleGFtcGxlQmluZGluZygpIHtcbiAgICAvLyBoZXJlIHlvdSBoYXZlIGFjY2VzcyB0byB0aGlzLmJpbmQudXNlciBhbmQgdGhpcy5iaW5kLnByb2dyYW1taW5nX2xhbmd1YWdlc1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuYmluZC51c2VyKTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmJpbmQucHJvZ3JhbW1pbmdfbGFuZ3VhZ2VzKTtcblxuICAgIC8vIG1vZGVsIGV4YW1wbGVzXG4gICAgY29uc3QgdXNlciA9IG5ldyBVc2VyTW9kZWwoKTtcbiAgICB1c2VyLnNldCgnYWdlJywgJzg3NzcnKTsgLy8gc2hvdWxkIGZhaWxcbiAgICB1c2VyLnNldCgnbmFtZScsICdteSBmaXJzdCBuYW1lIG9uIHVzZXIgbW9kZWwnKTsgLy8gc2hvdWxkIHBhc3NcbiAgICB1c2VyLnNldCgnYWdlJywge1xuICAgICAgYWdlOiAzMyxcbiAgICB9KTsgLy8gc2hvdWxkIGZhaWxcbiAgICB1c2VyLnNldCgnYWdlJywgOTk5KTsgLy8gc2hvdWxkIHBhc3NcbiAgICB1c2VyLnNldCgnYWRkcmVzcycsICdteSBhZGRyZXNzJyk7IC8vIHNob3VsZCBwYXNzXG5cbiAgICAvLyBzZXRzIGRhdGEgYmluZGluZ1xuICAgIC8vIHRoaXMuYmluZC51c2VyLm5hbWUgPSB1c2VyLmdldCgnbmFtZScpXG4gICAgdXNlci5zZXQoJ2FkZHJlc3MnLCB1c2VyLnVwQ2FzZSgnbXkgc2Vjb25kIGFkZHJlc3MnKSk7IC8vIHNob3VsZCBwYXNzIGFuZCBwb3N0Zml4IFwiIVwiIHRvIHRoZSBhZGRyZXNzXG5cbiAgICB1c2VyLnNhdmUoKS50aGVuKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCd0aGVuJyk7XG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVxdWVzdCBmYWlsZWQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgdXNlci51cGRhdGUoKTtcbiAgICB1c2VyLmZldGNoKCkudGhlbigoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygndGhlbicpO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3QgZmFpbGVkJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHVzZXIuZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3RoZW4nKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0IGZhaWxlZCcsIGVycm9yKTtcbiAgICB9KTtcblxuICAgIC8vIHNlY29uZCBtb2RlbFxuICAgIGNvbnN0IHZpZXdtb2RlbCA9IG5ldyBWaWV3TW9kZWwoKTtcbiAgICAvLyBzaG91bGQgcGFzc1xuICAgIHZpZXdtb2RlbC5zZXQoJ3NpbmdsZScsICd1cGRhdGVkIHZpYSB2aWV3bW9kZWwgbW9kZWwgc2V0IGZ1bmN0aW9uJyk7XG4gICAgLy8gc2hvdWxkIHBhc3NcbiAgICB2aWV3bW9kZWwuc2V0KCd1c2VyLm5hbWUnLCAnbXkgc2Vjb25kIGV4YW1wbGUgbmFtZScpO1xuICAgIC8vIHNob3VsZCBmYWlsXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZ2UnLCB7XG4gICAgICBhZ2U6IDIyLFxuICAgIH0pO1xuICAgIC8vIHNob3VsZCBmYWlsXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZ2UnLCA0NDQpO1xuICAgIC8vIHNob3VsZCBmYWlsXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZGRyZXNzJywgNzc4NzgpO1xuICAgIC8vIHNob3VsZCBwYXNzXG4gICAgdmlld21vZGVsLnNldCgndXNlci5hZGRyZXNzJywgJ215IHNlY29uZCBhZGRyZXNzJyk7XG5cbiAgICAvLyBzZXRzIGRhdGEgYmluZGluZ1xuICAgIC8vIHRoaXMuYmluZCA9IHZpZXdtb2RlbC5nZXQoKVxuICAgIC8vIHRoaXMuYmluZC51c2VyID0gdXNlci5nZXQoKVxuICAgIHRoaXMuYmluZGluZy5yZWZyZXNoKHRoaXMuYmluZCk7XG4gIH1cblxuICBleGFtcGxlUm91dGVyKCkge1xuICAgIC8vIGNoYW5nZSBzdGF0ZSB0byAvbGlzdFxuICAgIC8vIHJvdXRlci5nbygnaG9kb3IvMTInLCB7bXlkYXRhOjEyMzQ1NTYsIG15b2JqOntuYW1lOidzaGVybG9jayd9fSk7XG4gICAgLy8gc2V0VGltZW91dCgoKT0+IHdpbmRvdy5yb3V0ZXIuZ28oJ2xpc3QnKSwyMDAwKVxuICB9XG59XG4iLCJpbXBvcnQgTGlhaXNvbiBmcm9tICcuL0xpYWlzb24nO1xuaW1wb3J0IEJpbmRpbmcgZnJvbSAnLi9CaW5kaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhhbXBsZTIge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5iaW5kID0gbmV3IExpYWlzb24oZGF0YSk7XG4gICAgdGhpcy5iaW5kaW5nID0gbmV3IEJpbmRpbmcodGhpcy5iaW5kKTtcbiAgICAgIC8vIHRoaXMuYW5vdGhlckZ1bmN0aW9uKClcbiAgfVxuXG4gIGFub3RoZXJGdW5jdGlvbigpIHtcbiAgICAvLyBoZXJlIHlvdSBoYXZlIGFjY2VzcyB0byB0aGlzLmRhdGEudXNlciBhbmQgdGhpcy5kYXRhLnByb2dyYW1taW5nX2xhbmd1YWdlc1xuICAgIGNvbnNvbGUubG9nKHRoaXMuYmluZC5zdHJpbmcpO1xuICB9XG59XG4iLCIvLyBwdXRzIHJvdXRlcyBvbiB0aGUgcm91dGVyIGNsYXNzXG5cbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuLy8gVE9ETzogbm90IGF0dGFjaCB0aGlzIHRvIHRoZSBnbG9iYWwgbmFtZXNwYWNlXG53aW5kb3cucm91dGVyID0gd2luZG93LnJvdXRlciB8fCBuZXcgUm91dGVyKCk7XG53aW5kb3cucm91dGVyLnN0YXRlKHtcbiAgbmFtZTogJy91c2VycycsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJpbmRleC5odG1sJyxcbn0pLnN0YXRlKHtcbiAgbmFtZTogJy91c2VyLzppZCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXIuaHRtbCcsXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvdXNlci86aWQvZGV0YWlscycsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJkZXRhaWxzLmh0bWwnLFxufSkuc3RhdGUoe1xuICBuYW1lOiAnL3VzZXIvOmlkLzpzdWJpZCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3VzZXJzdWIuaHRtbCcsXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL2xpc3QuaHRtbCcsXG59KS5zdGF0ZSh7XG4gIG5hbWU6ICcvJyxcbiAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvbGlzdC5odG1sJyxcbn0pLmZhbGxiYWNrKHtcbiAgbmFtZTogJy80MDQnLFxuICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy80MDQuaHRtbCcsXG59KTtcbiIsImltcG9ydCBCYXNlTW9kZWwgZnJvbSAnLi9CYXNlTW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgVXNlck1vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3VzZXInLCB7XG4gICAgICBpZDoge1xuICAgICAgICB2YWx1ZTogNzg5Nzg3LFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIH0sXG4gICAgICBuYW1lOiB7XG4gICAgICAgIHZhbHVlOiAnbmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgfSxcbiAgICAgIGFkZHJlc3M6IHtcbiAgICAgICAgdmFsdWU6ICcyMjFiIGJha2UnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIH0sXG4gICAgICBhZ2U6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGV4YW1wbGUgbW9kZWwgaGVscGVyXG4gIHVwQ2FzZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBCYXNlTW9kZWwgZnJvbSAnLi9CYXNlTW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgVmlld01vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ3ZpZXcnLCB7XG4gICAgICBzaW5nbGU6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIHZhbHVlOiAnZnJvbSBzY2hlbWEnLFxuICAgICAgfSxcbiAgICAgIHVzZXI6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgdmFsdWU6IDg4ODg4LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICB2YWx1ZTogJ1NoZXJsb2NrIEhvbG1lcycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIHZhbHVlOiAnMjIxYiBCYWtlciBTdHJlZXQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcHJvZ3JhbW1pbmdMYW5ndWFnZXM6IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgdmFsdWU6IFsnamF2YXNjcmlwdCcsICdydWJ5J10sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
